
P:/ECSE324/G55_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	08 1a 00 00 14 1a 00 00 20 1a 00 00 2c 1a 00 00     ........ ...,...
      30:	38 1a 00 00 ec 29 00 00 b0 18 00 00 44 1a 00 00     8....)......D...

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000a2b 	bl	2988 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002ad4 	.word	0x00002ad4

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031d98 	.word	0x00031d98

00000124 <__cs3_heap_start_ptr>:
     124:	00031dc0 	.word	0x00031dc0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031da0 	.word	0x00031da0
     170:	00031da3 	.word	0x00031da3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031da0 	.word	0x00031da0
     1bc:	00031da0 	.word	0x00031da0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031da0 	.word	0x00031da0
     200:	00000000 	.word	0x00000000
     204:	00002a78 	.word	0x00002a78

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002a78 	.word	0x00002a78
     250:	00031da4 	.word	0x00031da4
     254:	00002ad8 	.word	0x00002ad8
     258:	00000000 	.word	0x00000000

0000025c <makeWave>:


char breakKey=0;
double noteStatus[16]={0,0,0,0,0,0,0,0,130.813,130.813,164.814,174.614,195.998,220.000,246.942,261.626};
double currentAmplitude=0.05;
int makeWave(double f,double t,double amp){
     25c:	e92d48f0 	push	{r4, r5, r6, r7, r11, lr}
     260:	e28db014 	add	r11, sp, #20
     264:	e24dd020 	sub	sp, sp, #32
     268:	e14b02fc 	strd	r0, [r11, #-44]	; 0xffffffd4
     26c:	e14b23f4 	strd	r2, [r11, #-52]	; 0xffffffcc
	double index=0;
     270:	e3a02000 	mov	r2, #0
     274:	e3a03000 	mov	r3, #0
     278:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4
	int samplingFreq=48000;
     27c:	e30b3b80 	movw	r3, #48000	; 0xbb80
     280:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	index=((int)(f*t))%samplingFreq;
     284:	e14b02dc 	ldrd	r0, [r11, #-44]	; 0xffffffd4
     288:	e14b23d4 	ldrd	r2, [r11, #-52]	; 0xffffffcc
     28c:	eb000763 	bl	2020 <__aeabi_dmul>
     290:	e1a02000 	mov	r2, r0
     294:	e1a03001 	mov	r3, r1
     298:	e1a00002 	mov	r0, r2
     29c:	e1a01003 	mov	r1, r3
     2a0:	eb0008d6 	bl	2600 <__aeabi_d2iz>
     2a4:	e1a03000 	mov	r3, r0
     2a8:	e1a00003 	mov	r0, r3
     2ac:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     2b0:	eb00064a 	bl	1be0 <__aeabi_idivmod>
     2b4:	e1a03001 	mov	r3, r1
     2b8:	e1a00003 	mov	r0, r3
     2bc:	eb000720 	bl	1f44 <__aeabi_i2d>
     2c0:	e1a02000 	mov	r2, r0
     2c4:	e1a03001 	mov	r3, r1
     2c8:	e14b21fc 	strd	r2, [r11, #-28]	; 0xffffffe4

	int signal=((1-(int)index-index)*sine[(int)index]+(index-(int)index)*sine[(int)index+1])*0.005;
     2cc:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
     2d0:	eb0008ca 	bl	2600 <__aeabi_d2iz>
     2d4:	e1a03000 	mov	r3, r0
     2d8:	e2633001 	rsb	r3, r3, #1
     2dc:	e1a00003 	mov	r0, r3
     2e0:	eb000717 	bl	1f44 <__aeabi_i2d>
     2e4:	e1a02000 	mov	r2, r0
     2e8:	e1a03001 	mov	r3, r1
     2ec:	e1a00002 	mov	r0, r2
     2f0:	e1a01003 	mov	r1, r3
     2f4:	e14b21dc 	ldrd	r2, [r11, #-28]	; 0xffffffe4
     2f8:	eb000643 	bl	1c0c <__aeabi_dsub>
     2fc:	e1a02000 	mov	r2, r0
     300:	e1a03001 	mov	r3, r1
     304:	e1a04002 	mov	r4, r2
     308:	e1a05003 	mov	r5, r3
     30c:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
     310:	eb0008ba 	bl	2600 <__aeabi_d2iz>
     314:	e1a02000 	mov	r2, r0
     318:	e3023b68 	movw	r3, #11112	; 0x2b68
     31c:	e3403000 	movt	r3, #0
     320:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     324:	e1a00003 	mov	r0, r3
     328:	eb000705 	bl	1f44 <__aeabi_i2d>
     32c:	e1a02000 	mov	r2, r0
     330:	e1a03001 	mov	r3, r1
     334:	e1a00004 	mov	r0, r4
     338:	e1a01005 	mov	r1, r5
     33c:	eb000737 	bl	2020 <__aeabi_dmul>
     340:	e1a02000 	mov	r2, r0
     344:	e1a03001 	mov	r3, r1
     348:	e1a04002 	mov	r4, r2
     34c:	e1a05003 	mov	r5, r3
     350:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
     354:	eb0008a9 	bl	2600 <__aeabi_d2iz>
     358:	e1a03000 	mov	r3, r0
     35c:	e1a00003 	mov	r0, r3
     360:	eb0006f7 	bl	1f44 <__aeabi_i2d>
     364:	e1a02000 	mov	r2, r0
     368:	e1a03001 	mov	r3, r1
     36c:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
     370:	eb000625 	bl	1c0c <__aeabi_dsub>
     374:	e1a02000 	mov	r2, r0
     378:	e1a03001 	mov	r3, r1
     37c:	e1a06002 	mov	r6, r2
     380:	e1a07003 	mov	r7, r3
     384:	e14b01dc 	ldrd	r0, [r11, #-28]	; 0xffffffe4
     388:	eb00089c 	bl	2600 <__aeabi_d2iz>
     38c:	e1a03000 	mov	r3, r0
     390:	e2832001 	add	r2, r3, #1
     394:	e3023b68 	movw	r3, #11112	; 0x2b68
     398:	e3403000 	movt	r3, #0
     39c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     3a0:	e1a00003 	mov	r0, r3
     3a4:	eb0006e6 	bl	1f44 <__aeabi_i2d>
     3a8:	e1a02000 	mov	r2, r0
     3ac:	e1a03001 	mov	r3, r1
     3b0:	e1a00006 	mov	r0, r6
     3b4:	e1a01007 	mov	r1, r7
     3b8:	eb000718 	bl	2020 <__aeabi_dmul>
     3bc:	e1a02000 	mov	r2, r0
     3c0:	e1a03001 	mov	r3, r1
     3c4:	e1a00004 	mov	r0, r4
     3c8:	e1a01005 	mov	r1, r5
     3cc:	eb00060f 	bl	1c10 <__adddf3>
     3d0:	e1a02000 	mov	r2, r0
     3d4:	e1a03001 	mov	r3, r1
     3d8:	e1a00002 	mov	r0, r2
     3dc:	e1a01003 	mov	r1, r3
     3e0:	e301247b 	movw	r2, #5243	; 0x147b
     3e4:	e34427ae 	movt	r2, #18350	; 0x47ae
     3e8:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     3ec:	e3433f74 	movt	r3, #16244	; 0x3f74
     3f0:	eb00070a 	bl	2020 <__aeabi_dmul>
     3f4:	e1a02000 	mov	r2, r0
     3f8:	e1a03001 	mov	r3, r1
     3fc:	e1a00002 	mov	r0, r2
     400:	e1a01003 	mov	r1, r3
     404:	eb00087d 	bl	2600 <__aeabi_d2iz>
     408:	e1a03000 	mov	r3, r0
     40c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	
	return signal;
     410:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
}
     414:	e1a00003 	mov	r0, r3
     418:	e24bd014 	sub	sp, r11, #20
     41c:	e8bd88f0 	pop	{r4, r5, r6, r7, r11, pc}

00000420 <mergeWaves>:
int mergeWaves(int t){
     420:	e92d48f0 	push	{r4, r5, r6, r7, r11, lr}
     424:	e28db014 	add	r11, sp, #20
     428:	e24dd020 	sub	sp, sp, #32
     42c:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
	int i=0;
     430:	e3a03000 	mov	r3, #0
     434:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int signal=0;
     438:	e3a03000 	mov	r3, #0
     43c:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int numActive=0;
     440:	e3a03000 	mov	r3, #0
     444:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	for(i=0;i<8;i++){
     448:	e3a03000 	mov	r3, #0
     44c:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     450:	ea00002c 	b	508 <mergeWaves+0xe8>
		if(noteStatus[i]==1){
     454:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     458:	e3403000 	movt	r3, #0
     45c:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     460:	e1a02182 	lsl	r2, r2, #3
     464:	e0833002 	add	r3, r3, r2
     468:	e1c320d0 	ldrd	r2, [r3]
     46c:	e1a00002 	mov	r0, r2
     470:	e1a01003 	mov	r1, r3
     474:	e3a02000 	mov	r2, #0
     478:	e3a03000 	mov	r3, #0
     47c:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     480:	eb000840 	bl	2588 <__aeabi_dcmpeq>
     484:	e1a03000 	mov	r3, r0
     488:	e3530000 	cmp	r3, #0
     48c:	0a00001a 	beq	4fc <mergeWaves+0xdc>
			numActive++;
     490:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     494:	e2833001 	add	r3, r3, #1
     498:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			signal+=makeWave(noteStatus[8+i],t,currentAmplitude)/1;
     49c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     4a0:	e2832008 	add	r2, r3, #8
     4a4:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     4a8:	e3403000 	movt	r3, #0
     4ac:	e1a02182 	lsl	r2, r2, #3
     4b0:	e0833002 	add	r3, r3, r2
     4b4:	e1c360d0 	ldrd	r6, [r3]
     4b8:	e51b0028 	ldr	r0, [r11, #-40]	; 0xffffffd8
     4bc:	eb0006a0 	bl	1f44 <__aeabi_i2d>
     4c0:	e1a04000 	mov	r4, r0
     4c4:	e1a05001 	mov	r5, r1
     4c8:	e3023b60 	movw	r3, #11104	; 0x2b60
     4cc:	e3403000 	movt	r3, #0
     4d0:	e1c320d0 	ldrd	r2, [r3]
     4d4:	e1cd20f0 	strd	r2, [sp]
     4d8:	e1a00006 	mov	r0, r6
     4dc:	e1a01007 	mov	r1, r7
     4e0:	e1a02004 	mov	r2, r4
     4e4:	e1a03005 	mov	r3, r5
     4e8:	ebffff5b 	bl	25c <makeWave>
     4ec:	e1a03000 	mov	r3, r0
     4f0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     4f4:	e0823003 	add	r3, r2, r3
     4f8:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
}
int mergeWaves(int t){
	int i=0;
	int signal=0;
	int numActive=0;
	for(i=0;i<8;i++){
     4fc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     500:	e2833001 	add	r3, r3, #1
     504:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
     508:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     50c:	e3530007 	cmp	r3, #7
     510:	daffffcf 	ble	454 <mergeWaves+0x34>
			numActive++;
			signal+=makeWave(noteStatus[8+i],t,currentAmplitude)/1;
		}
	//signal+=makeWave(noteStatus[8+i],t,currentAmplitude*noteStatus[i]);
	}
	signal=signal/numActive;
     514:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     518:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     51c:	eb000565 	bl	1ab8 <__aeabi_idiv>
     520:	e1a03000 	mov	r3, r0
     524:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	


	return (int)signal;
     528:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
}
     52c:	e1a00003 	mov	r0, r3
     530:	e24bd014 	sub	sp, r11, #20
     534:	e8bd88f0 	pop	{r4, r5, r6, r7, r11, pc}

00000538 <updateKeyStatus>:
int updateKeyStatus(){//return 1 if at least 1 
     538:	e92d4800 	push	{r11, lr}
     53c:	e28db004 	add	r11, sp, #4
     540:	e24dd018 	sub	sp, sp, #24
	int activeKey=0;
     544:	e3a03000 	mov	r3, #0
     548:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	char data=0;
     54c:	e3a03000 	mov	r3, #0
     550:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
	read_ps2_data_ASM(&data);
     554:	e24b3015 	sub	r3, r11, #21
     558:	e1a00003 	mov	r0, r3
     55c:	eb000387 	bl	1380 <read_ps2_data_ASM>

	//go through every possible keypress and update the noteStatus array from 0 to 1 if key down also set activeKey to 1 if at leas tone key down

	//check for break code then depending on the next read set back noteStatus form 1 to 0 meaning the key is up
	int foundBreak=0;
     560:	e3a03000 	mov	r3, #0
     564:	e50b3008 	str	r3, [r11, #-8]

	if(data==0xF0){
     568:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     56c:	e35300f0 	cmp	r3, #240	; 0xf0
     570:	1a00006d 	bne	72c <updateKeyStatus+0x1f4>
		while(!foundBreak){//finding break codes
     574:	ea000068 	b	71c <updateKeyStatus+0x1e4>
			read_ps2_data_ASM(&data);
     578:	e24b3015 	sub	r3, r11, #21
     57c:	e1a00003 	mov	r0, r3
     580:	eb00037e 	bl	1380 <read_ps2_data_ASM>

			if(data==0x55){ //+
     584:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     588:	e3530055 	cmp	r3, #85	; 0x55
     58c:	1a000002 	bne	59c <updateKeyStatus+0x64>
				foundBreak=1;
     590:	e3a03001 	mov	r3, #1
     594:	e50b3008 	str	r3, [r11, #-8]
     598:	ea00005f 	b	71c <updateKeyStatus+0x1e4>
			}
			else if (data==0x4E) {
     59c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     5a0:	e353004e 	cmp	r3, #78	; 0x4e
     5a4:	1a000002 	bne	5b4 <updateKeyStatus+0x7c>
				foundBreak=1;
     5a8:	e3a03001 	mov	r3, #1
     5ac:	e50b3008 	str	r3, [r11, #-8]
     5b0:	ea000059 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x1C){//keyDown A
     5b4:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     5b8:	e353001c 	cmp	r3, #28
     5bc:	1a000007 	bne	5e0 <updateKeyStatus+0xa8>
				noteStatus[0]=0;
     5c0:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     5c4:	e3403000 	movt	r3, #0
     5c8:	e3a00000 	mov	r0, #0
     5cc:	e3a01000 	mov	r1, #0
     5d0:	e1c300f0 	strd	r0, [r3]
				foundBreak=1;
     5d4:	e3a03001 	mov	r3, #1
     5d8:	e50b3008 	str	r3, [r11, #-8]
     5dc:	ea00004e 	b	71c <updateKeyStatus+0x1e4>
				
			}
			else if(data==0x1B){//S
     5e0:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     5e4:	e353001b 	cmp	r3, #27
     5e8:	1a000007 	bne	60c <updateKeyStatus+0xd4>
				noteStatus[1]=0;
     5ec:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     5f0:	e3403000 	movt	r3, #0
     5f4:	e3a00000 	mov	r0, #0
     5f8:	e3a01000 	mov	r1, #0
     5fc:	e1c300f8 	strd	r0, [r3, #8]
				foundBreak=1;
     600:	e3a03001 	mov	r3, #1
     604:	e50b3008 	str	r3, [r11, #-8]
     608:	ea000043 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x23){ //D
     60c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     610:	e3530023 	cmp	r3, #35	; 0x23
     614:	1a000007 	bne	638 <updateKeyStatus+0x100>
				noteStatus[2]=0;
     618:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     61c:	e3403000 	movt	r3, #0
     620:	e3a00000 	mov	r0, #0
     624:	e3a01000 	mov	r1, #0
     628:	e1c301f0 	strd	r0, [r3, #16]
				foundBreak=1;
     62c:	e3a03001 	mov	r3, #1
     630:	e50b3008 	str	r3, [r11, #-8]
     634:	ea000038 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x2B){ //F
     638:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     63c:	e353002b 	cmp	r3, #43	; 0x2b
     640:	1a000007 	bne	664 <updateKeyStatus+0x12c>
				noteStatus[3]=0;
     644:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     648:	e3403000 	movt	r3, #0
     64c:	e3a00000 	mov	r0, #0
     650:	e3a01000 	mov	r1, #0
     654:	e1c301f8 	strd	r0, [r3, #24]
				foundBreak=1;
     658:	e3a03001 	mov	r3, #1
     65c:	e50b3008 	str	r3, [r11, #-8]
     660:	ea00002d 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x3B){ //J
     664:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     668:	e353003b 	cmp	r3, #59	; 0x3b
     66c:	1a000007 	bne	690 <updateKeyStatus+0x158>
				noteStatus[4]=0;
     670:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     674:	e3403000 	movt	r3, #0
     678:	e3a00000 	mov	r0, #0
     67c:	e3a01000 	mov	r1, #0
     680:	e1c302f0 	strd	r0, [r3, #32]
				foundBreak=1;
     684:	e3a03001 	mov	r3, #1
     688:	e50b3008 	str	r3, [r11, #-8]
     68c:	ea000022 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x42){ //K
     690:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     694:	e3530042 	cmp	r3, #66	; 0x42
     698:	1a000007 	bne	6bc <updateKeyStatus+0x184>
				noteStatus[5]=0;
     69c:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     6a0:	e3403000 	movt	r3, #0
     6a4:	e3a00000 	mov	r0, #0
     6a8:	e3a01000 	mov	r1, #0
     6ac:	e1c302f8 	strd	r0, [r3, #40]	; 0x28
				foundBreak=1;
     6b0:	e3a03001 	mov	r3, #1
     6b4:	e50b3008 	str	r3, [r11, #-8]
     6b8:	ea000017 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x4B){ //L
     6bc:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     6c0:	e353004b 	cmp	r3, #75	; 0x4b
     6c4:	1a000007 	bne	6e8 <updateKeyStatus+0x1b0>
				noteStatus[6]=0;
     6c8:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     6cc:	e3403000 	movt	r3, #0
     6d0:	e3a00000 	mov	r0, #0
     6d4:	e3a01000 	mov	r1, #0
     6d8:	e1c303f0 	strd	r0, [r3, #48]	; 0x30
				foundBreak=1;
     6dc:	e3a03001 	mov	r3, #1
     6e0:	e50b3008 	str	r3, [r11, #-8]
     6e4:	ea00000c 	b	71c <updateKeyStatus+0x1e4>
			}
			else if(data==0x4C){ //;
     6e8:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     6ec:	e353004c 	cmp	r3, #76	; 0x4c
     6f0:	1a000007 	bne	714 <updateKeyStatus+0x1dc>
				noteStatus[7]=0;
     6f4:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     6f8:	e3403000 	movt	r3, #0
     6fc:	e3a00000 	mov	r0, #0
     700:	e3a01000 	mov	r1, #0
     704:	e1c303f8 	strd	r0, [r3, #56]	; 0x38
				foundBreak=1;
     708:	e3a03001 	mov	r3, #1
     70c:	e50b3008 	str	r3, [r11, #-8]
     710:	ea000001 	b	71c <updateKeyStatus+0x1e4>
			}else foundBreak=0;
     714:	e3a03000 	mov	r3, #0
     718:	e50b3008 	str	r3, [r11, #-8]

	//check for break code then depending on the next read set back noteStatus form 1 to 0 meaning the key is up
	int foundBreak=0;

	if(data==0xF0){
		while(!foundBreak){//finding break codes
     71c:	e51b3008 	ldr	r3, [r11, #-8]
     720:	e3530000 	cmp	r3, #0
     724:	0affff93 	beq	578 <updateKeyStatus+0x40>
     728:	ea00009a 	b	998 <ICDIPTR+0x198>
				foundBreak=1;
			}else foundBreak=0;

		}
	}//finding key downs
	else if(data==0x55){ //+
     72c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     730:	e3530055 	cmp	r3, #85	; 0x55
     734:	1a000023 	bne	7c8 <updateKeyStatus+0x290>
		currentAmplitude+=0.01;
     738:	e3023b60 	movw	r3, #11104	; 0x2b60
     73c:	e3403000 	movt	r3, #0
     740:	e1c320d0 	ldrd	r2, [r3]
     744:	e1a00002 	mov	r0, r2
     748:	e1a01003 	mov	r1, r3
     74c:	e301247b 	movw	r2, #5243	; 0x147b
     750:	e34427ae 	movt	r2, #18350	; 0x47ae
     754:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     758:	e3433f84 	movt	r3, #16260	; 0x3f84
     75c:	eb00052b 	bl	1c10 <__adddf3>
     760:	e1a02000 	mov	r2, r0
     764:	e1a03001 	mov	r3, r1
     768:	e1a00002 	mov	r0, r2
     76c:	e1a01003 	mov	r1, r3
     770:	e3023b60 	movw	r3, #11104	; 0x2b60
     774:	e3403000 	movt	r3, #0
     778:	e1c300f0 	strd	r0, [r3]
		if(currentAmplitude>1){
     77c:	e3023b60 	movw	r3, #11104	; 0x2b60
     780:	e3403000 	movt	r3, #0
     784:	e1c320d0 	ldrd	r2, [r3]
     788:	e1a00002 	mov	r0, r2
     78c:	e1a01003 	mov	r1, r3
     790:	e3a02000 	mov	r2, #0
     794:	e3a03000 	mov	r3, #0
     798:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     79c:	eb000791 	bl	25e8 <__aeabi_dcmpgt>
     7a0:	e1a03000 	mov	r3, r0
     7a4:	e3530000 	cmp	r3, #0
     7a8:	0a00007a 	beq	998 <ICDIPTR+0x198>
			currentAmplitude=1;
     7ac:	e3023b60 	movw	r3, #11104	; 0x2b60
     7b0:	e3403000 	movt	r3, #0
     7b4:	e3a00000 	mov	r0, #0
     7b8:	e3a01000 	mov	r1, #0
     7bc:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     7c0:	e1c300f0 	strd	r0, [r3]
     7c4:	ea000073 	b	998 <ICDIPTR+0x198>
		}
	}
	else if (data==0x4E) { //-
     7c8:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     7cc:	e353004e 	cmp	r3, #78	; 0x4e
     7d0:	1a000021 	bne	85c <ICDIPTR+0x5c>
		currentAmplitude-=0.01;
     7d4:	e3023b60 	movw	r3, #11104	; 0x2b60
     7d8:	e3403000 	movt	r3, #0
     7dc:	e1c320d0 	ldrd	r2, [r3]
     7e0:	e1a00002 	mov	r0, r2
     7e4:	e1a01003 	mov	r1, r3
     7e8:	e301247b 	movw	r2, #5243	; 0x147b
     7ec:	e34427ae 	movt	r2, #18350	; 0x47ae
     7f0:	e3073ae1 	movw	r3, #31457	; 0x7ae1
     7f4:	e3433f84 	movt	r3, #16260	; 0x3f84
     7f8:	eb000503 	bl	1c0c <__aeabi_dsub>
     7fc:	e1a02000 	mov	r2, r0
     800:	e1a03001 	mov	r3, r1
     804:	e1a00002 	mov	r0, r2
     808:	e1a01003 	mov	r1, r3
     80c:	e3023b60 	movw	r3, #11104	; 0x2b60
     810:	e3403000 	movt	r3, #0
     814:	e1c300f0 	strd	r0, [r3]
		if(currentAmplitude<0){
     818:	e3023b60 	movw	r3, #11104	; 0x2b60
     81c:	e3403000 	movt	r3, #0
     820:	e1c320d0 	ldrd	r2, [r3]
     824:	e1a00002 	mov	r0, r2
     828:	e1a01003 	mov	r1, r3
     82c:	e3a02000 	mov	r2, #0
     830:	e3a03000 	mov	r3, #0
     834:	eb000759 	bl	25a0 <__aeabi_dcmplt>
     838:	e1a03000 	mov	r3, r0
     83c:	e3530000 	cmp	r3, #0
     840:	0a000054 	beq	998 <ICDIPTR+0x198>
			currentAmplitude=0;
     844:	e3023b60 	movw	r3, #11104	; 0x2b60
     848:	e3403000 	movt	r3, #0
     84c:	e3a00000 	mov	r0, #0
     850:	e3a01000 	mov	r1, #0
     854:	e1c300f0 	strd	r0, [r3]
     858:	ea00004e 	b	998 <ICDIPTR+0x198>
		}
	}
	else if(data==0x1C){//keyDown A
     85c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     860:	e353001c 	cmp	r3, #28
     864:	1a000006 	bne	884 <ICDIPTR+0x84>
		noteStatus[0]=1;
     868:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     86c:	e3403000 	movt	r3, #0
     870:	e3a00000 	mov	r0, #0
     874:	e3a01000 	mov	r1, #0
     878:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     87c:	e1c300f0 	strd	r0, [r3]
     880:	ea000044 	b	998 <ICDIPTR+0x198>
		
	}
	else if(data==0x1B){//S
     884:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     888:	e353001b 	cmp	r3, #27
     88c:	1a000006 	bne	8ac <ICDIPTR+0xac>
		noteStatus[1]=1;
     890:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     894:	e3403000 	movt	r3, #0
     898:	e3a00000 	mov	r0, #0
     89c:	e3a01000 	mov	r1, #0
     8a0:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     8a4:	e1c300f8 	strd	r0, [r3, #8]
     8a8:	ea00003a 	b	998 <ICDIPTR+0x198>
		
	}
	else if(data==0x23){ //D
     8ac:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     8b0:	e3530023 	cmp	r3, #35	; 0x23
     8b4:	1a000006 	bne	8d4 <ICDIPTR+0xd4>
		noteStatus[2]=1;
     8b8:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     8bc:	e3403000 	movt	r3, #0
     8c0:	e3a00000 	mov	r0, #0
     8c4:	e3a01000 	mov	r1, #0
     8c8:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     8cc:	e1c301f0 	strd	r0, [r3, #16]
     8d0:	ea000030 	b	998 <ICDIPTR+0x198>

	}
	else if(data==0x2B){ //F
     8d4:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     8d8:	e353002b 	cmp	r3, #43	; 0x2b
     8dc:	1a000006 	bne	8fc <ICDIPTR+0xfc>
		noteStatus[3]=1;
     8e0:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     8e4:	e3403000 	movt	r3, #0
     8e8:	e3a00000 	mov	r0, #0
     8ec:	e3a01000 	mov	r1, #0
     8f0:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     8f4:	e1c301f8 	strd	r0, [r3, #24]
     8f8:	ea000026 	b	998 <ICDIPTR+0x198>
	}
	else if(data==0x3B){ //J
     8fc:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     900:	e353003b 	cmp	r3, #59	; 0x3b
     904:	1a000006 	bne	924 <ICDIPTR+0x124>
		noteStatus[4]=1;
     908:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     90c:	e3403000 	movt	r3, #0
     910:	e3a00000 	mov	r0, #0
     914:	e3a01000 	mov	r1, #0
     918:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     91c:	e1c302f0 	strd	r0, [r3, #32]
     920:	ea00001c 	b	998 <ICDIPTR+0x198>
	}
	else if(data==0x42){ //K
     924:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     928:	e3530042 	cmp	r3, #66	; 0x42
     92c:	1a000006 	bne	94c <ICDIPTR+0x14c>
		noteStatus[5]=1;
     930:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     934:	e3403000 	movt	r3, #0
     938:	e3a00000 	mov	r0, #0
     93c:	e3a01000 	mov	r1, #0
     940:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     944:	e1c302f8 	strd	r0, [r3, #40]	; 0x28
     948:	ea000012 	b	998 <ICDIPTR+0x198>
	}
	else if(data==0x4B){ //L
     94c:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     950:	e353004b 	cmp	r3, #75	; 0x4b
     954:	1a000006 	bne	974 <ICDIPTR+0x174>
		noteStatus[6]=1;
     958:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     95c:	e3403000 	movt	r3, #0
     960:	e3a00000 	mov	r0, #0
     964:	e3a01000 	mov	r1, #0
     968:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     96c:	e1c303f0 	strd	r0, [r3, #48]	; 0x30
     970:	ea000008 	b	998 <ICDIPTR+0x198>
	}
	else if(data==0x4C){ //;
     974:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
     978:	e353004c 	cmp	r3, #76	; 0x4c
     97c:	1a000005 	bne	998 <ICDIPTR+0x198>
		noteStatus[7]=1;
     980:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     984:	e3403000 	movt	r3, #0
     988:	e3a00000 	mov	r0, #0
     98c:	e3a01000 	mov	r1, #0
     990:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     994:	e1c303f8 	strd	r0, [r3, #56]	; 0x38
	}
	int keysAreActive=0;
     998:	e3a03000 	mov	r3, #0
     99c:	e50b300c 	str	r3, [r11, #-12]
	int j=0;
     9a0:	e3a03000 	mov	r3, #0
     9a4:	e50b3010 	str	r3, [r11, #-16]
	for (j=0;j<8;j++){
     9a8:	e3a03000 	mov	r3, #0
     9ac:	e50b3010 	str	r3, [r11, #-16]
     9b0:	ea000012 	b	a00 <ICDIPTR+0x200>
		keysAreActive+=noteStatus[j];
     9b4:	e51b000c 	ldr	r0, [r11, #-12]
     9b8:	eb000561 	bl	1f44 <__aeabi_i2d>
     9bc:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     9c0:	e3403000 	movt	r3, #0
     9c4:	e51b2010 	ldr	r2, [r11, #-16]
     9c8:	e1a02182 	lsl	r2, r2, #3
     9cc:	e0833002 	add	r3, r3, r2
     9d0:	e1c320d0 	ldrd	r2, [r3]
     9d4:	eb00048d 	bl	1c10 <__adddf3>
     9d8:	e1a02000 	mov	r2, r0
     9dc:	e1a03001 	mov	r3, r1
     9e0:	e1a00002 	mov	r0, r2
     9e4:	e1a01003 	mov	r1, r3
     9e8:	eb000704 	bl	2600 <__aeabi_d2iz>
     9ec:	e1a03000 	mov	r3, r0
     9f0:	e50b300c 	str	r3, [r11, #-12]
	else if(data==0x4C){ //;
		noteStatus[7]=1;
	}
	int keysAreActive=0;
	int j=0;
	for (j=0;j<8;j++){
     9f4:	e51b3010 	ldr	r3, [r11, #-16]
     9f8:	e2833001 	add	r3, r3, #1
     9fc:	e50b3010 	str	r3, [r11, #-16]
     a00:	e51b3010 	ldr	r3, [r11, #-16]
     a04:	e3530007 	cmp	r3, #7
     a08:	daffffe9 	ble	9b4 <ICDIPTR+0x1b4>
		keysAreActive+=noteStatus[j];
	}
	if(keysAreActive>0){
     a0c:	e51b300c 	ldr	r3, [r11, #-12]
     a10:	e3530000 	cmp	r3, #0
     a14:	da000001 	ble	a20 <ICDIPTR+0x220>
		return 1;
     a18:	e3a03001 	mov	r3, #1
     a1c:	ea000000 	b	a24 <ICDIPTR+0x224>
	}else {
		return 0;
     a20:	e3a03000 	mov	r3, #0
	}

}
     a24:	e1a00003 	mov	r0, r3
     a28:	e24bd004 	sub	sp, r11, #4
     a2c:	e8bd8800 	pop	{r11, pc}

00000a30 <prins>:
void prins(){
     a30:	e92d4810 	push	{r4, r11, lr}
     a34:	e28db008 	add	r11, sp, #8
     a38:	e24dd00c 	sub	sp, sp, #12
	int a=0;
     a3c:	e3a03000 	mov	r3, #0
     a40:	e50b3010 	str	r3, [r11, #-16]
	short c=130;
     a44:	e3a03082 	mov	r3, #130	; 0x82
     a48:	e14b31b2 	strh	r3, [r11, #-18]	; 0xffffffee
	for(a=0;a<8;a++){
     a4c:	e3a03000 	mov	r3, #0
     a50:	e50b3010 	str	r3, [r11, #-16]
     a54:	ea00008a 	b	c84 <ICDICFR+0x84>
			VGA_draw_point_ASM(30+a*5,40,5000*(int)noteStatus[a]);
     a58:	e51b2010 	ldr	r2, [r11, #-16]
     a5c:	e1a03002 	mov	r3, r2
     a60:	e1a03103 	lsl	r3, r3, #2
     a64:	e0833002 	add	r3, r3, r2
     a68:	e283401e 	add	r4, r3, #30
     a6c:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     a70:	e3403000 	movt	r3, #0
     a74:	e51b2010 	ldr	r2, [r11, #-16]
     a78:	e1a02182 	lsl	r2, r2, #3
     a7c:	e0833002 	add	r3, r3, r2
     a80:	e1c320d0 	ldrd	r2, [r3]
     a84:	e1a00002 	mov	r0, r2
     a88:	e1a01003 	mov	r1, r3
     a8c:	eb0006db 	bl	2600 <__aeabi_d2iz>
     a90:	e1a03000 	mov	r3, r0
     a94:	e6ff3073 	uxth	r3, r3
     a98:	e1a02003 	mov	r2, r3
     a9c:	e1a02282 	lsl	r2, r2, #5
     aa0:	e0632002 	rsb	r2, r3, r2
     aa4:	e1a02102 	lsl	r2, r2, #2
     aa8:	e0823003 	add	r3, r2, r3
     aac:	e1a02003 	mov	r2, r3
     ab0:	e1a01102 	lsl	r1, r2, #2
     ab4:	e1a02003 	mov	r2, r3
     ab8:	e1a03001 	mov	r3, r1
     abc:	e0823003 	add	r3, r2, r3
     ac0:	e1a03183 	lsl	r3, r3, #3
     ac4:	e6ff3073 	uxth	r3, r3
     ac8:	e6ff3073 	uxth	r3, r3
     acc:	e6bf3073 	sxth	r3, r3
     ad0:	e1a00004 	mov	r0, r4
     ad4:	e3a01028 	mov	r1, #40	; 0x28
     ad8:	e1a02003 	mov	r2, r3
     adc:	eb0002e8 	bl	1684 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(31+a*5,40,5000*(int)noteStatus[a]);
     ae0:	e51b2010 	ldr	r2, [r11, #-16]
     ae4:	e1a03002 	mov	r3, r2
     ae8:	e1a03103 	lsl	r3, r3, #2
     aec:	e0833002 	add	r3, r3, r2
     af0:	e283401f 	add	r4, r3, #31
     af4:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     af8:	e3403000 	movt	r3, #0
     afc:	e51b2010 	ldr	r2, [r11, #-16]
     b00:	e1a02182 	lsl	r2, r2, #3
     b04:	e0833002 	add	r3, r3, r2
     b08:	e1c320d0 	ldrd	r2, [r3]
     b0c:	e1a00002 	mov	r0, r2
     b10:	e1a01003 	mov	r1, r3
     b14:	eb0006b9 	bl	2600 <__aeabi_d2iz>
     b18:	e1a03000 	mov	r3, r0
     b1c:	e6ff3073 	uxth	r3, r3
     b20:	e1a02003 	mov	r2, r3
     b24:	e1a02282 	lsl	r2, r2, #5
     b28:	e0632002 	rsb	r2, r3, r2
     b2c:	e1a02102 	lsl	r2, r2, #2
     b30:	e0823003 	add	r3, r2, r3
     b34:	e1a02003 	mov	r2, r3
     b38:	e1a01102 	lsl	r1, r2, #2
     b3c:	e1a02003 	mov	r2, r3
     b40:	e1a03001 	mov	r3, r1
     b44:	e0823003 	add	r3, r2, r3
     b48:	e1a03183 	lsl	r3, r3, #3
     b4c:	e6ff3073 	uxth	r3, r3
     b50:	e6ff3073 	uxth	r3, r3
     b54:	e6bf3073 	sxth	r3, r3
     b58:	e1a00004 	mov	r0, r4
     b5c:	e3a01028 	mov	r1, #40	; 0x28
     b60:	e1a02003 	mov	r2, r3
     b64:	eb0002c6 	bl	1684 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(30+a*5,41,5000*(int)noteStatus[a]);
     b68:	e51b2010 	ldr	r2, [r11, #-16]
     b6c:	e1a03002 	mov	r3, r2
     b70:	e1a03103 	lsl	r3, r3, #2
     b74:	e0833002 	add	r3, r3, r2
     b78:	e283401e 	add	r4, r3, #30
     b7c:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     b80:	e3403000 	movt	r3, #0
     b84:	e51b2010 	ldr	r2, [r11, #-16]
     b88:	e1a02182 	lsl	r2, r2, #3
     b8c:	e0833002 	add	r3, r3, r2
     b90:	e1c320d0 	ldrd	r2, [r3]
     b94:	e1a00002 	mov	r0, r2
     b98:	e1a01003 	mov	r1, r3
     b9c:	eb000697 	bl	2600 <__aeabi_d2iz>
     ba0:	e1a03000 	mov	r3, r0
     ba4:	e6ff3073 	uxth	r3, r3
     ba8:	e1a02003 	mov	r2, r3
     bac:	e1a02282 	lsl	r2, r2, #5
     bb0:	e0632002 	rsb	r2, r3, r2
     bb4:	e1a02102 	lsl	r2, r2, #2
     bb8:	e0823003 	add	r3, r2, r3
     bbc:	e1a02003 	mov	r2, r3
     bc0:	e1a01102 	lsl	r1, r2, #2
     bc4:	e1a02003 	mov	r2, r3
     bc8:	e1a03001 	mov	r3, r1
     bcc:	e0823003 	add	r3, r2, r3
     bd0:	e1a03183 	lsl	r3, r3, #3
     bd4:	e6ff3073 	uxth	r3, r3
     bd8:	e6ff3073 	uxth	r3, r3
     bdc:	e6bf3073 	sxth	r3, r3
     be0:	e1a00004 	mov	r0, r4
     be4:	e3a01029 	mov	r1, #41	; 0x29
     be8:	e1a02003 	mov	r2, r3
     bec:	eb0002a4 	bl	1684 <VGA_draw_point_ASM>
			VGA_draw_point_ASM(31+a*5,41,5000*(int)noteStatus[a]);
     bf0:	e51b2010 	ldr	r2, [r11, #-16]
     bf4:	e1a03002 	mov	r3, r2
     bf8:	e1a03103 	lsl	r3, r3, #2
     bfc:	e0833002 	add	r3, r3, r2
     c00:	e283401f 	add	r4, r3, #31
     c04:	e3023ae0 	movw	r3, #10976	; 0x2ae0
     c08:	e3403000 	movt	r3, #0
     c0c:	e51b2010 	ldr	r2, [r11, #-16]
     c10:	e1a02182 	lsl	r2, r2, #3
     c14:	e0833002 	add	r3, r3, r2
     c18:	e1c320d0 	ldrd	r2, [r3]
     c1c:	e1a00002 	mov	r0, r2
     c20:	e1a01003 	mov	r1, r3
     c24:	eb000675 	bl	2600 <__aeabi_d2iz>
     c28:	e1a03000 	mov	r3, r0
     c2c:	e6ff3073 	uxth	r3, r3
     c30:	e1a02003 	mov	r2, r3
     c34:	e1a02282 	lsl	r2, r2, #5
     c38:	e0632002 	rsb	r2, r3, r2
     c3c:	e1a02102 	lsl	r2, r2, #2
     c40:	e0823003 	add	r3, r2, r3
     c44:	e1a02003 	mov	r2, r3
     c48:	e1a01102 	lsl	r1, r2, #2
     c4c:	e1a02003 	mov	r2, r3
     c50:	e1a03001 	mov	r3, r1
     c54:	e0823003 	add	r3, r2, r3
     c58:	e1a03183 	lsl	r3, r3, #3
     c5c:	e6ff3073 	uxth	r3, r3
     c60:	e6ff3073 	uxth	r3, r3
     c64:	e6bf3073 	sxth	r3, r3
     c68:	e1a00004 	mov	r0, r4
     c6c:	e3a01029 	mov	r1, #41	; 0x29
     c70:	e1a02003 	mov	r2, r3
     c74:	eb000282 	bl	1684 <VGA_draw_point_ASM>

}
void prins(){
	int a=0;
	short c=130;
	for(a=0;a<8;a++){
     c78:	e51b3010 	ldr	r3, [r11, #-16]
     c7c:	e2833001 	add	r3, r3, #1
     c80:	e50b3010 	str	r3, [r11, #-16]
     c84:	e51b3010 	ldr	r3, [r11, #-16]
     c88:	e3530007 	cmp	r3, #7
     c8c:	daffff71 	ble	a58 <prins+0x28>
			VGA_draw_point_ASM(30+a*5,40,5000*(int)noteStatus[a]);
			VGA_draw_point_ASM(31+a*5,40,5000*(int)noteStatus[a]);
			VGA_draw_point_ASM(30+a*5,41,5000*(int)noteStatus[a]);
			VGA_draw_point_ASM(31+a*5,41,5000*(int)noteStatus[a]);
	}
}
     c90:	e24bd008 	sub	sp, r11, #8
     c94:	e8bd8810 	pop	{r4, r11, pc}

00000c98 <playWave>:
void playWave(){//remove freq check buttons pressed
     c98:	e92d4800 	push	{r11, lr}
     c9c:	e28db004 	add	r11, sp, #4
     ca0:	e24dd030 	sub	sp, sp, #48	; 0x30
	
	int t=0;
     ca4:	e3a03000 	mov	r3, #0
     ca8:	e50b3008 	str	r3, [r11, #-8]
	int c=0;
     cac:	e3a03000 	mov	r3, #0
     cb0:	e50b300c 	str	r3, [r11, #-12]
	int samplingFreq=48000;
     cb4:	e30b3b80 	movw	r3, #48000	; 0xbb80
     cb8:	e50b3010 	str	r3, [r11, #-16]
	int signal=0;
     cbc:	e3a03000 	mov	r3, #0
     cc0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int lowestFreq=400;
     cc4:	e3a03e19 	mov	r3, #400	; 0x190
     cc8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int period=samplingFreq/lowestFreq;
     ccc:	e51b0010 	ldr	r0, [r11, #-16]
     cd0:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     cd4:	eb000377 	bl	1ab8 <__aeabi_idiv>
     cd8:	e1a03000 	mov	r3, r0
     cdc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4

	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0;
     ce0:	e3a03001 	mov	r3, #1
     ce4:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.timeout =1000000/lowestFreq; //in 10^-6 seconds LIMITS NOISE WHILE SWITCHING KEYS
     ce8:	e3040240 	movw	r0, #16960	; 0x4240
     cec:	e340000f 	movt	r0, #15
     cf0:	e51b1018 	ldr	r1, [r11, #-24]	; 0xffffffe8
     cf4:	eb00036f 	bl	1ab8 <__aeabi_idiv>
     cf8:	e1a03000 	mov	r3, r0
     cfc:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.LD_en=1;
     d00:	e3a03001 	mov	r3, #1
     d04:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.INT_en=0;
     d08:	e3a03000 	mov	r3, #0
     d0c:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.enable=1;
     d10:	e3a03001 	mov	r3, #1
     d14:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	HPS_TIM_config_ASM(&hps_tim);
     d18:	e24b3030 	sub	r3, r11, #48	; 0x30
     d1c:	e1a00003 	mov	r0, r3
     d20:	eb00004b 	bl	e54 <HPS_TIM_config_ASM>
	
	while(updateKeyStatus()){
     d24:	ea00001d 	b	da0 <playWave+0x108>
		prins();
     d28:	ebffff40 	bl	a30 <prins>
		if(HPS_TIM_read_INT_ASM(TIM0)){
     d2c:	e3a00001 	mov	r0, #1
     d30:	eb00008a 	bl	f60 <HPS_TIM_read_INT_ASM>
     d34:	e1a03000 	mov	r3, r0
     d38:	e3530000 	cmp	r3, #0
     d3c:	0a000017 	beq	da0 <playWave+0x108>
			HPS_TIM_clear_INT_ASM(TIM0);
     d40:	e3a00001 	mov	r0, #1
     d44:	eb00009c 	bl	fbc <HPS_TIM_clear_INT_ASM>
			//t=t%1000000;//prevent overflow
			c=0;
     d48:	e3a03000 	mov	r3, #0
     d4c:	e50b300c 	str	r3, [r11, #-12]
			while(c<period){//might need to limit it to the highest frequency
     d50:	ea00000e 	b	d90 <playWave+0xf8>

				signal=mergeWaves(t);//.01 medium 0.001 low
     d54:	e51b0008 	ldr	r0, [r11, #-8]
     d58:	ebfffdb0 	bl	420 <mergeWaves>
     d5c:	e50b0014 	str	r0, [r11, #-20]	; 0xffffffec
				// 	convSignal=(convSignal<21)?convSignal:0;
				// 	VGA_draw_point_ASM(c,50+convSignal,5000);
				// }
				

				if(audio_write_data_ASM(signal,signal)){
     d60:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     d64:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     d68:	eb000113 	bl	11bc <audio_write_data_ASM>
     d6c:	e1a03000 	mov	r3, r0
     d70:	e3530000 	cmp	r3, #0
     d74:	0a000005 	beq	d90 <playWave+0xf8>
					t++;
     d78:	e51b3008 	ldr	r3, [r11, #-8]
     d7c:	e2833001 	add	r3, r3, #1
     d80:	e50b3008 	str	r3, [r11, #-8]
					c++;
     d84:	e51b300c 	ldr	r3, [r11, #-12]
     d88:	e2833001 	add	r3, r3, #1
     d8c:	e50b300c 	str	r3, [r11, #-12]
		prins();
		if(HPS_TIM_read_INT_ASM(TIM0)){
			HPS_TIM_clear_INT_ASM(TIM0);
			//t=t%1000000;//prevent overflow
			c=0;
			while(c<period){//might need to limit it to the highest frequency
     d90:	e51b200c 	ldr	r2, [r11, #-12]
     d94:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     d98:	e1520003 	cmp	r2, r3
     d9c:	baffffec 	blt	d54 <playWave+0xbc>
	hps_tim.LD_en=1;
	hps_tim.INT_en=0;
	hps_tim.enable=1;
	HPS_TIM_config_ASM(&hps_tim);
	
	while(updateKeyStatus()){
     da0:	ebfffde4 	bl	538 <updateKeyStatus>
     da4:	e1a03000 	mov	r3, r0
     da8:	e3530000 	cmp	r3, #0
     dac:	1affffdd 	bne	d28 <playWave+0x90>
			
			
		}
	}

}
     db0:	e24bd004 	sub	sp, r11, #4
     db4:	e8bd8800 	pop	{r11, pc}

00000db8 <main>:


	

int main() {
     db8:	e92d4800 	push	{r11, lr}
     dbc:	e28db004 	add	r11, sp, #4
	VGA_clear_pixelbuff_ASM();
     dc0:	eb0001fb 	bl	15b4 <VGA_clear_pixelbuff_ASM>
	while(1){
		playWave();
     dc4:	ebffffb3 	bl	c98 <playWave>
	}
     dc8:	eafffffd 	b	dc4 <main+0xc>

00000dcc <HEX_clear_ASM>:
     dcc:	e3a01000 	mov	r1, #0
     dd0:	ea000004 	b	de8 <WRITE>

00000dd4 <HEX_flood_ASM>:
     dd4:	e3a0107f 	mov	r1, #127	; 0x7f
     dd8:	ea000002 	b	de8 <WRITE>

00000ddc <HEX_write_ASM>:
     ddc:	e59f2064 	ldr	r2, [pc, #100]	; e48 <PATTERNS+0x14>
     de0:	e7d21001 	ldrb	r1, [r2, r1]
     de4:	eaffffff 	b	de8 <WRITE>

00000de8 <WRITE>:
     de8:	e92d0030 	push	{r4, r5}
     dec:	e59f2058 	ldr	r2, [pc, #88]	; e4c <PATTERNS+0x18>
     df0:	e3a03000 	mov	r3, #0
     df4:	e3e050ff 	mvn	r5, #255	; 0xff

00000df8 <LOOP>:
     df8:	e3100001 	tst	r0, #1
     dfc:	0a000003 	beq	e10 <CONTINUE>
     e00:	e5924000 	ldr	r4, [r2]
     e04:	e0044005 	and	r4, r4, r5
     e08:	e1844001 	orr	r4, r4, r1
     e0c:	e5824000 	str	r4, [r2]

00000e10 <CONTINUE>:
     e10:	e1a05c65 	ror	r5, r5, #24
     e14:	e1a01c61 	ror	r1, r1, #24
     e18:	e2833001 	add	r3, r3, #1
     e1c:	e3530004 	cmp	r3, #4
     e20:	059f2028 	ldreq	r2, [pc, #40]	; e50 <PATTERNS+0x1c>
     e24:	e1b000a0 	lsrs	r0, r0, #1
     e28:	1afffff2 	bne	df8 <LOOP>
     e2c:	e8bd0030 	pop	{r4, r5}
     e30:	e12fff1e 	bx	lr

00000e34 <PATTERNS>:
     e34:	4f5b063f 	.word	0x4f5b063f
     e38:	077d6d66 	.word	0x077d6d66
     e3c:	7c776f7f 	.word	0x7c776f7f
     e40:	71795e39 	.word	0x71795e39
     e44:	000000ff 	.word	0x000000ff
     e48:	00000e34 	.word	0x00000e34
     e4c:	ff200020 	.word	0xff200020
     e50:	ff200030 	.word	0xff200030

00000e54 <HPS_TIM_config_ASM>:
			.global EDGECAP_ASM
			.global CLEAR_EDGECAP_ASM

HPS_TIM_config_ASM:	
				
				PUSH {LR}
     e54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				LDR R1,[R0]//r1 is 4bits
     e58:	e5901000 	ldr	r1, [r0]
				BIC R1,#0xFFFFFFF0
     e5c:	e201100f 	and	r1, r1, #15
//B END
//END:B END
				AND R2,R1,#0x1 // configue timer 0
     e60:	e2012001 	and	r2, r1, #1
				CMP R2,#0x1
     e64:	e3520001 	cmp	r2, #1
				LDREQ R7,=HPS0
     e68:	059f7210 	ldreq	r7, [pc, #528]	; 1080 <CLEAR_EDGECAP_ASM+0x18>
				PUSH {R0-R10}
     e6c:	e92d07ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}
				BLEQ CONFIG
     e70:	0b000014 	bleq	ec8 <CONFIG>
				POP {R0-R10}
     e74:	e8bd07ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}

				AND R2,R1,#0x2 // configue timer 1
     e78:	e2012002 	and	r2, r1, #2
				CMP R2,#0x2
     e7c:	e3520002 	cmp	r2, #2
				LDREQ R7,=HPS1
     e80:	059f71fc 	ldreq	r7, [pc, #508]	; 1084 <CLEAR_EDGECAP_ASM+0x1c>
				PUSH {R0-R10}
     e84:	e92d07ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}
				BLEQ CONFIG
     e88:	0b00000e 	bleq	ec8 <CONFIG>
				POP {R0-R10}
     e8c:	e8bd07ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}

				AND R2,R1,#0x4 // configue timer 2
     e90:	e2012004 	and	r2, r1, #4
				CMP R2,#0x4
     e94:	e3520004 	cmp	r2, #4
				LDREQ R7,=HPS2
     e98:	059f71e8 	ldreq	r7, [pc, #488]	; 1088 <CLEAR_EDGECAP_ASM+0x20>
				PUSH {R0-R10}
     e9c:	e92d07ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}
				BLEQ CONFIG
     ea0:	0b000008 	bleq	ec8 <CONFIG>
				POP {R0-R10}
     ea4:	e8bd07ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}

				AND R2,R1,#0x8 // configue timer 3
     ea8:	e2012008 	and	r2, r1, #8
				CMP R2,#0x8
     eac:	e3520008 	cmp	r2, #8
				LDREQ R7,=HPS3
     eb0:	059f71d4 	ldreq	r7, [pc, #468]	; 108c <CLEAR_EDGECAP_ASM+0x24>
				PUSH {R0-R10}
     eb4:	e92d07ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}
				BLEQ CONFIG
     eb8:	0b000002 	bleq	ec8 <CONFIG>
				POP {R0-R10}
     ebc:	e8bd07ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10}

				POP {LR}
     ec0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)

				BX LR
     ec4:	e12fff1e 	bx	lr

00000ec8 <CONFIG>:

CONFIG:			MOV R1,#0//set control E to 0 to config
     ec8:	e3a01000 	mov	r1, #0
				LDR R2,[R7,#0x8]
     ecc:	e5972008 	ldr	r2, [r7, #8]
				BIC R2,#0x1
     ed0:	e3c22001 	bic	r2, r2, #1
				ORR R1,R1,R2
     ed4:	e1811002 	orr	r1, r1, r2
				STR R1,[R7,#0x8]
     ed8:	e5871008 	str	r1, [r7, #8]
					

				LDR R1,[R0,#4]	//timeout =load value with correct scale
     edc:	e5901004 	ldr	r1, [r0, #4]
				PUSH {R3}
     ee0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
				MOV R3,#100
     ee4:	e3a03064 	mov	r3, #100	; 0x64
				MUL R1,R3
     ee8:	e0010193 	mul	r1, r3, r1
				POP {R3}
     eec:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)

				LDR R2,=HPS1
     ef0:	e59f218c 	ldr	r2, [pc, #396]	; 1084 <CLEAR_EDGECAP_ASM+0x1c>
				CMP R7,R2
     ef4:	e1570002 	cmp	r7, r2
				PUSHEQ {R3}
     ef8:	052d3004 	pusheq	{r3}		; (streq r3, [sp, #-4]!)
				LDREQ R3,=0x186A0
     efc:	059f318c 	ldreq	r3, [pc, #396]	; 1090 <CLEAR_EDGECAP_ASM+0x28>
				SUBEQ R1,R3
     f00:	00411003 	subeq	r1, r1, r3
				POPEQ {R3}
     f04:	049d3004 	popeq	{r3}		; (ldreq r3, [sp], #4)
				BEQ SKIP
     f08:	0a000001 	beq	f14 <SKIP>
				CMP R7,#0xFFC08000
     f0c:	e37709fe 	cmn	r7, #4161536	; 0x3f8000
				LSRNE R1,#2
     f10:	11a01121 	lsrne	r1, r1, #2

00000f14 <SKIP>:
SKIP:

				STR R1,[R7,#0x0]	//store time out
     f14:	e5871000 	str	r1, [r7]

				LDR R1,[R0,#8]	//Load_en =M bit
     f18:	e5901008 	ldr	r1, [r0, #8]
				LDR R2,[R7,#0x8]
     f1c:	e5972008 	ldr	r2, [r7, #8]
				LSL R1,#1
     f20:	e1a01081 	lsl	r1, r1, #1
				BIC R2,#0x2
     f24:	e3c22002 	bic	r2, r2, #2
				ORR R1,R1,R2
     f28:	e1811002 	orr	r1, r1, r2
				STR R1,[R7,#0x8]
     f2c:	e5871008 	str	r1, [r7, #8]

				LDR R1,[R0,#12]	//Interupt_en =I-bit
     f30:	e590100c 	ldr	r1, [r0, #12]
				LDR R2,[R7,#0x8]
     f34:	e5972008 	ldr	r2, [r7, #8]
				LSL R1,#2
     f38:	e1a01101 	lsl	r1, r1, #2
				BIC R2,#0x4
     f3c:	e3c22004 	bic	r2, r2, #4
				ORR R1,R1,R2
     f40:	e1811002 	orr	r1, r1, r2
				STR R1,[R7,#0x8]
     f44:	e5871008 	str	r1, [r7, #8]

				LDR R1,[R0,#16]	//set enable to Enable works 07=111
     f48:	e5901010 	ldr	r1, [r0, #16]
				LDR R2,[R7,#0x8]
     f4c:	e5972008 	ldr	r2, [r7, #8]
				BIC R2,#0x1
     f50:	e3c22001 	bic	r2, r2, #1
				ORR R1,R1,R2
     f54:	e1811002 	orr	r1, r1, r2
				STR R1,[R7,#0x8]
     f58:	e5871008 	str	r1, [r7, #8]

				BX LR
     f5c:	e12fff1e 	bx	lr

00000f60 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM: //Return the read from timers
				
				PUSH {LR}
     f60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				MOV R1,R0//r1 is 4bits
     f64:	e1a01000 	mov	r1, r0

				AND R2,R1,#0x1
     f68:	e2012001 	and	r2, r1, #1
				CMP R2,#0x1
     f6c:	e3520001 	cmp	r2, #1
				LDREQ R7,=HPS0
     f70:	059f7108 	ldreq	r7, [pc, #264]	; 1080 <CLEAR_EDGECAP_ASM+0x18>
				BLEQ READ
     f74:	0b00000b 	bleq	fa8 <READ>

				AND R2,R1,#0x2
     f78:	e2012002 	and	r2, r1, #2
				CMP R2,#0x2
     f7c:	e3520002 	cmp	r2, #2
				LDREQ R7,=HPS1
     f80:	059f70fc 	ldreq	r7, [pc, #252]	; 1084 <CLEAR_EDGECAP_ASM+0x1c>
				BLEQ READ
     f84:	0b000007 	bleq	fa8 <READ>

				AND R2,R1,#0x4
     f88:	e2012004 	and	r2, r1, #4
				CMP R2,#0x4
     f8c:	e3520004 	cmp	r2, #4
				LDREQ R7,=HPS2
     f90:	059f70f0 	ldreq	r7, [pc, #240]	; 1088 <CLEAR_EDGECAP_ASM+0x20>
				BLEQ READ
     f94:	0b000003 	bleq	fa8 <READ>

				AND R2,R1,#0x8
     f98:	e2012008 	and	r2, r1, #8
				CMP R2,#0x8
     f9c:	e3520008 	cmp	r2, #8
				LDREQ R7,=HPS3
     fa0:	059f70e4 	ldreq	r7, [pc, #228]	; 108c <CLEAR_EDGECAP_ASM+0x24>
				BLEQ READ
     fa4:	0bffffff 	bleq	fa8 <READ>

00000fa8 <READ>:

READ:			LDR R1,[R7,#0x10]
     fa8:	e5971010 	ldr	r1, [r7, #16]
				BIC R1,#0xFFFFFFFE
     fac:	e2011001 	and	r1, r1, #1
				MOV R0,R1 //RETURN R1
     fb0:	e1a00001 	mov	r0, r1
				
				POP {LR}
     fb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
     fb8:	e12fff1e 	bx	lr

00000fbc <HPS_TIM_clear_INT_ASM>:


HPS_TIM_clear_INT_ASM: // clear timers

				PUSH {LR}
     fbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
				MOV R1,R0//r1 is 4bits
     fc0:	e1a01000 	mov	r1, r0

				AND R2,R1,#0x1
     fc4:	e2012001 	and	r2, r1, #1
				CMP R2,#0x1
     fc8:	e3520001 	cmp	r2, #1
				LDREQ R7,=HPS0
     fcc:	059f70ac 	ldreq	r7, [pc, #172]	; 1080 <CLEAR_EDGECAP_ASM+0x18>
				BLEQ WRITE
     fd0:	0b00000d 	bleq	100c <WRITE>

				AND R2,R1,#0x2
     fd4:	e2012002 	and	r2, r1, #2
				CMP R2,#0x2
     fd8:	e3520002 	cmp	r2, #2
				LDREQ R7,=HPS1
     fdc:	059f70a0 	ldreq	r7, [pc, #160]	; 1084 <CLEAR_EDGECAP_ASM+0x1c>
				BLEQ WRITE
     fe0:	0b000009 	bleq	100c <WRITE>

				AND R2,R1,#0x4
     fe4:	e2012004 	and	r2, r1, #4
				CMP R2,#0x4
     fe8:	e3520004 	cmp	r2, #4
				LDREQ R7,=HPS2
     fec:	059f7094 	ldreq	r7, [pc, #148]	; 1088 <CLEAR_EDGECAP_ASM+0x20>
				BLEQ WRITE
     ff0:	0b000005 	bleq	100c <WRITE>

				AND R2,R1,#0x8
     ff4:	e2012008 	and	r2, r1, #8
				CMP R2,#0x8
     ff8:	e3520008 	cmp	r2, #8
				LDREQ R7,=HPS3
     ffc:	059f7088 	ldreq	r7, [pc, #136]	; 108c <CLEAR_EDGECAP_ASM+0x24>
				BLEQ WRITE
    1000:	0b000001 	bleq	100c <WRITE>

				POP {LR}
    1004:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
				BX LR
    1008:	e12fff1e 	bx	lr

0000100c <WRITE>:

WRITE:			MOV R1,#0//set control E to 0 to config
    100c:	e3a01000 	mov	r1, #0
				LDR R2,[R7,#0x8]
    1010:	e5972008 	ldr	r2, [r7, #8]
				BIC R2,#0x1
    1014:	e3c22001 	bic	r2, r2, #1
				ORR R1,R1,R2
    1018:	e1811002 	orr	r1, r1, r2
				STR R1,[R7,#0x8]
    101c:	e5871008 	str	r1, [r7, #8]


				LDR R1,[R7,#0x10]
    1020:	e5971010 	ldr	r1, [r7, #16]
				BIC R1,#0x1
    1024:	e3c11001 	bic	r1, r1, #1
				STR R1,[R7,#0x10]
    1028:	e5871010 	str	r1, [r7, #16]

				LDR R1,[R7,#0xC]
    102c:	e597100c 	ldr	r1, [r7, #12]
				BIC R1,#0x1
    1030:	e3c11001 	bic	r1, r1, #1
				STR R1,[R7,#0xC]
    1034:	e587100c 	str	r1, [r7, #12]


				MOV R1,#1//set control E to 1
    1038:	e3a01001 	mov	r1, #1
				LDR R2,[R7,#0x8]
    103c:	e5972008 	ldr	r2, [r7, #8]
				BIC R2,#0x1
    1040:	e3c22001 	bic	r2, r2, #1
				ORR R1,R1,R2
    1044:	e1811002 	orr	r1, r1, r2
				STR R1,[R7,#0x8]
    1048:	e5871008 	str	r1, [r7, #8]
				
				BX LR
    104c:	e12fff1e 	bx	lr

00001050 <EDGECAP_ASM>:

EDGECAP_ASM:	//Read from edgecapture
				PUSH {R1,R2}
    1050:	e92d0006 	push	{r1, r2}
				LDR R1,=EDATA
    1054:	e59f1038 	ldr	r1, [pc, #56]	; 1094 <CLEAR_EDGECAP_ASM+0x2c>
				LDR R0,[R1]
    1058:	e5910000 	ldr	r0, [r1]
				BIC R0,#0xFFFFFFF0
    105c:	e200000f 	and	r0, r0, #15
				POP {R1,R2}
    1060:	e8bd0006 	pop	{r1, r2}
				BX LR
    1064:	e12fff1e 	bx	lr

00001068 <CLEAR_EDGECAP_ASM>:

CLEAR_EDGECAP_ASM:  //Clear edgecapture
				PUSH {R1-R3}
    1068:	e92d000e 	push	{r1, r2, r3}
				LDR R2,=EDATA
    106c:	e59f2020 	ldr	r2, [pc, #32]	; 1094 <CLEAR_EDGECAP_ASM+0x2c>
				LDR	R3,[R2]
    1070:	e5923000 	ldr	r3, [r2]
				STR R3,[R2]
    1074:	e5823000 	str	r3, [r2]
				POP {R1-R3}
    1078:	e8bd000e 	pop	{r1, r2, r3}
				BX LR
    107c:	e12fff1e 	bx	lr
				BIC R1,#0xFFFFFFF0
//B END
//END:B END
				AND R2,R1,#0x1 // configue timer 0
				CMP R2,#0x1
				LDREQ R7,=HPS0
    1080:	ffc08000 	.word	0xffc08000
				BLEQ CONFIG
				POP {R0-R10}

				AND R2,R1,#0x2 // configue timer 1
				CMP R2,#0x2
				LDREQ R7,=HPS1
    1084:	ffc09000 	.word	0xffc09000
				BLEQ CONFIG
				POP {R0-R10}

				AND R2,R1,#0x4 // configue timer 2
				CMP R2,#0x4
				LDREQ R7,=HPS2
    1088:	ffd00000 	.word	0xffd00000
				BLEQ CONFIG
				POP {R0-R10}

				AND R2,R1,#0x8 // configue timer 3
				CMP R2,#0x8
				LDREQ R7,=HPS3
    108c:	ffd01000 	.word	0xffd01000
				POP {R3}

				LDR R2,=HPS1
				CMP R7,R2
				PUSHEQ {R3}
				LDREQ R3,=0x186A0
    1090:	000186a0 	.word	0x000186a0
				
				BX LR

EDGECAP_ASM:	//Read from edgecapture
				PUSH {R1,R2}
				LDR R1,=EDATA
    1094:	ff20005c 	.word	0xff20005c

00001098 <A9_PRIV_TIM_ISR>:
	.global FPGA_JP1_ISR
	.global FPGA_JP2_ISR
	.global FPGA_PS2_DUAL_ISR
	
A9_PRIV_TIM_ISR:
	BX LR
    1098:	e12fff1e 	bx	lr

0000109c <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
    109c:	e12fff1e 	bx	lr

000010a0 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	BX LR
    10a0:	e12fff1e 	bx	lr

000010a4 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
    10a4:	e12fff1e 	bx	lr

000010a8 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
    10a8:	e12fff1e 	bx	lr

000010ac <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
    10ac:	e12fff1e 	bx	lr

000010b0 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
    10b0:	e12fff1e 	bx	lr

000010b4 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
    10b4:	e12fff1e 	bx	lr

000010b8 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
    10b8:	e12fff1e 	bx	lr

000010bc <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
    10bc:	e12fff1e 	bx	lr

000010c0 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
    10c0:	e12fff1e 	bx	lr

000010c4 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
    10c4:	e12fff1e 	bx	lr

000010c8 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
    10c8:	e12fff1e 	bx	lr

000010cc <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
    10cc:	e12fff1e 	bx	lr

000010d0 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
    10d0:	e12fff1e 	bx	lr

000010d4 <read_LEDs_ASM>:
    10d4:	e59f1010 	ldr	r1, [pc, #16]	; 10ec <write_LEDs_ASM+0xc>
    10d8:	e5910000 	ldr	r0, [r1]
    10dc:	e12fff1e 	bx	lr

000010e0 <write_LEDs_ASM>:
    10e0:	e59f1004 	ldr	r1, [pc, #4]	; 10ec <write_LEDs_ASM+0xc>
    10e4:	e5810000 	str	r0, [r1]
    10e8:	e12fff1e 	bx	lr
    10ec:	ff200000 	.word	0xff200000

000010f0 <audio_read_data_ASM>:
    10f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    10f4:	e92d0003 	push	{r0, r1}
    10f8:	eb000093 	bl	134c <audio_read_ralc_ASM>
    10fc:	e3500000 	cmp	r0, #0
    1100:	08bd0003 	popeq	{r0, r1}
    1104:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1108:	03a00000 	moveq	r0, #0
    110c:	012fff1e 	bxeq	lr
    1110:	eb000092 	bl	1360 <audio_read_rarc_ASM>
    1114:	e3500000 	cmp	r0, #0
    1118:	08bd0003 	popeq	{r0, r1}
    111c:	03a00000 	moveq	r0, #0
    1120:	012fff1e 	bxeq	lr
    1124:	e8bd0003 	pop	{r0, r1}
    1128:	e59f2240 	ldr	r2, [pc, #576]	; 1370 <audio_read_rarc_ASM+0x10>
    112c:	e5922000 	ldr	r2, [r2]
    1130:	e5802000 	str	r2, [r0]
    1134:	e59f3238 	ldr	r3, [pc, #568]	; 1374 <audio_read_rarc_ASM+0x14>
    1138:	e5933000 	ldr	r3, [r3]
    113c:	e5813000 	str	r3, [r1]
    1140:	e3a00001 	mov	r0, #1

00001144 <audio_read_leftdata_ASM>:
    1144:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1148:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    114c:	eb00007e 	bl	134c <audio_read_ralc_ASM>
    1150:	e3500000 	cmp	r0, #0
    1154:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1158:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    115c:	03a00000 	moveq	r0, #0
    1160:	012fff1e 	bxeq	lr
    1164:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1168:	e59f2200 	ldr	r2, [pc, #512]	; 1370 <audio_read_rarc_ASM+0x10>
    116c:	e5922000 	ldr	r2, [r2]
    1170:	e5802000 	str	r2, [r0]
    1174:	e3a00001 	mov	r0, #1
    1178:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    117c:	e12fff1e 	bx	lr

00001180 <audio_read_rightdata_ASM>:
    1180:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1184:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1188:	eb000074 	bl	1360 <audio_read_rarc_ASM>
    118c:	e3500000 	cmp	r0, #0
    1190:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1194:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1198:	03a00000 	moveq	r0, #0
    119c:	012fff1e 	bxeq	lr
    11a0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    11a4:	e59f21c8 	ldr	r2, [pc, #456]	; 1374 <audio_read_rarc_ASM+0x14>
    11a8:	e5922000 	ldr	r2, [r2]
    11ac:	e5802000 	str	r2, [r0]
    11b0:	e3a00001 	mov	r0, #1
    11b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    11b8:	e12fff1e 	bx	lr

000011bc <audio_write_data_ASM>:
    11bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    11c0:	e92d0003 	push	{r0, r1}
    11c4:	eb000056 	bl	1324 <audio_read_wslc_ASM>
    11c8:	e3500000 	cmp	r0, #0
    11cc:	08bd0003 	popeq	{r0, r1}
    11d0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    11d4:	03a00000 	moveq	r0, #0
    11d8:	012fff1e 	bxeq	lr
    11dc:	eb000055 	bl	1338 <audio_read_wsrc_ASM>
    11e0:	e3500000 	cmp	r0, #0
    11e4:	08bd0003 	popeq	{r0, r1}
    11e8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    11ec:	03a00000 	moveq	r0, #0
    11f0:	012fff1e 	bxeq	lr
    11f4:	e8bd0003 	pop	{r0, r1}
    11f8:	e59f2170 	ldr	r2, [pc, #368]	; 1370 <audio_read_rarc_ASM+0x10>
    11fc:	e5820000 	str	r0, [r2]
    1200:	e59f316c 	ldr	r3, [pc, #364]	; 1374 <audio_read_rarc_ASM+0x14>
    1204:	e5831000 	str	r1, [r3]
    1208:	e3a00001 	mov	r0, #1
    120c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1210:	e12fff1e 	bx	lr

00001214 <audio_write_leftdata_ASM>:
    1214:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1218:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    121c:	eb000040 	bl	1324 <audio_read_wslc_ASM>
    1220:	e3500000 	cmp	r0, #0
    1224:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1228:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    122c:	03a00000 	moveq	r0, #0
    1230:	012fff1e 	bxeq	lr
    1234:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1238:	e59f2130 	ldr	r2, [pc, #304]	; 1370 <audio_read_rarc_ASM+0x10>
    123c:	e5820000 	str	r0, [r2]
    1240:	e3a00001 	mov	r0, #1
    1244:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1248:	e12fff1e 	bx	lr

0000124c <audio_write_rightdata_ASM>:
    124c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1250:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    1254:	eb000037 	bl	1338 <audio_read_wsrc_ASM>
    1258:	e3500000 	cmp	r0, #0
    125c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1260:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1264:	03a00000 	moveq	r0, #0
    1268:	012fff1e 	bxeq	lr
    126c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1270:	e59f20fc 	ldr	r2, [pc, #252]	; 1374 <audio_read_rarc_ASM+0x14>
    1274:	e5820000 	str	r0, [r2]
    1278:	e3a00001 	mov	r0, #1
    127c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1280:	e12fff1e 	bx	lr

00001284 <audio_enable_read_fifo_clear_ASM>:
    1284:	e59f00ec 	ldr	r0, [pc, #236]	; 1378 <audio_read_rarc_ASM+0x18>
    1288:	e5901000 	ldr	r1, [r0]
    128c:	e3811004 	orr	r1, r1, #4
    1290:	e5801000 	str	r1, [r0]
    1294:	e12fff1e 	bx	lr

00001298 <audio_enable_write_fifo_clear_ASM>:
    1298:	e59f00d8 	ldr	r0, [pc, #216]	; 1378 <audio_read_rarc_ASM+0x18>
    129c:	e5901000 	ldr	r1, [r0]
    12a0:	e3811008 	orr	r1, r1, #8
    12a4:	e5801000 	str	r1, [r0]
    12a8:	e12fff1e 	bx	lr

000012ac <audio_disable_read_fifo_clear_ASM>:
    12ac:	e59f00c4 	ldr	r0, [pc, #196]	; 1378 <audio_read_rarc_ASM+0x18>
    12b0:	e5901000 	ldr	r1, [r0]
    12b4:	e3c11004 	bic	r1, r1, #4
    12b8:	e5801000 	str	r1, [r0]
    12bc:	e12fff1e 	bx	lr

000012c0 <audio_disable_write_fifo_clear_ASM>:
    12c0:	e59f00b0 	ldr	r0, [pc, #176]	; 1378 <audio_read_rarc_ASM+0x18>
    12c4:	e5901000 	ldr	r1, [r0]
    12c8:	e3c11008 	bic	r1, r1, #8
    12cc:	e5801000 	str	r1, [r0]
    12d0:	e12fff1e 	bx	lr

000012d4 <audio_enable_read_int_ASM>:
    12d4:	e59f009c 	ldr	r0, [pc, #156]	; 1378 <audio_read_rarc_ASM+0x18>
    12d8:	e5901000 	ldr	r1, [r0]
    12dc:	e3811001 	orr	r1, r1, #1
    12e0:	e5801000 	str	r1, [r0]
    12e4:	e12fff1e 	bx	lr

000012e8 <audio_enable_write_int_ASM>:
    12e8:	e59f0088 	ldr	r0, [pc, #136]	; 1378 <audio_read_rarc_ASM+0x18>
    12ec:	e5901000 	ldr	r1, [r0]
    12f0:	e3811002 	orr	r1, r1, #2
    12f4:	e5801000 	str	r1, [r0]
    12f8:	e12fff1e 	bx	lr

000012fc <audio_disable_read_int_ASM>:
    12fc:	e59f0074 	ldr	r0, [pc, #116]	; 1378 <audio_read_rarc_ASM+0x18>
    1300:	e5901000 	ldr	r1, [r0]
    1304:	e3c11001 	bic	r1, r1, #1
    1308:	e5801000 	str	r1, [r0]
    130c:	e12fff1e 	bx	lr

00001310 <audio_disable_write_int_ASM>:
    1310:	e59f0060 	ldr	r0, [pc, #96]	; 1378 <audio_read_rarc_ASM+0x18>
    1314:	e5901000 	ldr	r1, [r0]
    1318:	e3c11002 	bic	r1, r1, #2
    131c:	e5801000 	str	r1, [r0]
    1320:	e12fff1e 	bx	lr

00001324 <audio_read_wslc_ASM>:
    1324:	e59f0050 	ldr	r0, [pc, #80]	; 137c <audio_read_rarc_ASM+0x1c>
    1328:	e5900000 	ldr	r0, [r0]
    132c:	e1a00c20 	lsr	r0, r0, #24
    1330:	e20000ff 	and	r0, r0, #255	; 0xff
    1334:	e12fff1e 	bx	lr

00001338 <audio_read_wsrc_ASM>:
    1338:	e59f003c 	ldr	r0, [pc, #60]	; 137c <audio_read_rarc_ASM+0x1c>
    133c:	e5900000 	ldr	r0, [r0]
    1340:	e1a00820 	lsr	r0, r0, #16
    1344:	e20000ff 	and	r0, r0, #255	; 0xff
    1348:	e12fff1e 	bx	lr

0000134c <audio_read_ralc_ASM>:
    134c:	e59f0028 	ldr	r0, [pc, #40]	; 137c <audio_read_rarc_ASM+0x1c>
    1350:	e5900000 	ldr	r0, [r0]
    1354:	e1a00420 	lsr	r0, r0, #8
    1358:	e20000ff 	and	r0, r0, #255	; 0xff
    135c:	e12fff1e 	bx	lr

00001360 <audio_read_rarc_ASM>:
    1360:	e59f0014 	ldr	r0, [pc, #20]	; 137c <audio_read_rarc_ASM+0x1c>
    1364:	e5900000 	ldr	r0, [r0]
    1368:	e20000ff 	and	r0, r0, #255	; 0xff
    136c:	e12fff1e 	bx	lr
    1370:	ff203048 	.word	0xff203048
    1374:	ff20304c 	.word	0xff20304c
    1378:	ff203040 	.word	0xff203040
    137c:	ff203044 	.word	0xff203044

00001380 <read_ps2_data_ASM>:
    1380:	e59f114c 	ldr	r1, [pc, #332]	; 14d4 <ps2_fifo_ravail+0x4>
    1384:	e5911000 	ldr	r1, [r1]
    1388:	e3a02902 	mov	r2, #32768	; 0x8000
    138c:	e1110002 	tst	r1, r2
    1390:	03a00000 	moveq	r0, #0
    1394:	012fff1e 	bxeq	lr
    1398:	e20120ff 	and	r2, r1, #255	; 0xff
    139c:	e5c02000 	strb	r2, [r0]
    13a0:	e59f2130 	ldr	r2, [pc, #304]	; 14d8 <ps2_fifo_ravail+0x8>
    13a4:	e0010002 	and	r0, r1, r2
    13a8:	e1a00820 	lsr	r0, r0, #16
    13ac:	e12fff1e 	bx	lr

000013b0 <enable_ps2_int_ASM>:
    13b0:	e59f011c 	ldr	r0, [pc, #284]	; 14d4 <ps2_fifo_ravail+0x4>
    13b4:	e3a01001 	mov	r1, #1
    13b8:	e5c01004 	strb	r1, [r0, #4]
    13bc:	e12fff1e 	bx	lr

000013c0 <disable_ps2_int_ASM>:
    13c0:	e59f010c 	ldr	r0, [pc, #268]	; 14d4 <ps2_fifo_ravail+0x4>
    13c4:	e3a01000 	mov	r1, #0
    13c8:	e5c01004 	strb	r1, [r0, #4]
    13cc:	e12fff1e 	bx	lr

000013d0 <ps2_fifo_data>:
	...

000014d0 <ps2_fifo_ravail>:
    14d0:	00000000 	.word	0x00000000
    14d4:	ff200100 	.word	0xff200100
    14d8:	ffff0000 	.word	0xffff0000

000014dc <read_PB_data_ASM>:
    14dc:	e59f1074 	ldr	r1, [pc, #116]	; 1558 <disable_PB_INT_ASM+0x14>
    14e0:	e5910000 	ldr	r0, [r1]
    14e4:	e12fff1e 	bx	lr

000014e8 <PB_data_is_pressed_ASM>:
    14e8:	e59f1068 	ldr	r1, [pc, #104]	; 1558 <disable_PB_INT_ASM+0x14>
    14ec:	e5912000 	ldr	r2, [r1]
    14f0:	e0000002 	and	r0, r0, r2
    14f4:	e3300000 	teq	r0, #0
    14f8:	13a00001 	movne	r0, #1
    14fc:	e12fff1e 	bx	lr

00001500 <read_PB_edgecap_ASM>:
    1500:	e59f1054 	ldr	r1, [pc, #84]	; 155c <disable_PB_INT_ASM+0x18>
    1504:	e5910000 	ldr	r0, [r1]
    1508:	e12fff1e 	bx	lr

0000150c <PB_edgecap_is_pressed_ASM>:
    150c:	e59f1048 	ldr	r1, [pc, #72]	; 155c <disable_PB_INT_ASM+0x18>
    1510:	e5912000 	ldr	r2, [r1]
    1514:	e0000002 	and	r0, r0, r2
    1518:	e3300000 	teq	r0, #0
    151c:	13a00001 	movne	r0, #1
    1520:	e12fff1e 	bx	lr

00001524 <PB_clear_edgecp_ASM>:
    1524:	e59f1030 	ldr	r1, [pc, #48]	; 155c <disable_PB_INT_ASM+0x18>
    1528:	e5810000 	str	r0, [r1]
    152c:	e12fff1e 	bx	lr

00001530 <enable_PB_INT_ASM>:
    1530:	e59f1028 	ldr	r1, [pc, #40]	; 1560 <disable_PB_INT_ASM+0x1c>
    1534:	e5912000 	ldr	r2, [r1]
    1538:	e1800002 	orr	r0, r0, r2
    153c:	e5810000 	str	r0, [r1]
    1540:	e12fff1e 	bx	lr

00001544 <disable_PB_INT_ASM>:
    1544:	e59f1014 	ldr	r1, [pc, #20]	; 1560 <disable_PB_INT_ASM+0x1c>
    1548:	e5912000 	ldr	r2, [r1]
    154c:	e1c00002 	bic	r0, r0, r2
    1550:	e5810000 	str	r0, [r1]
    1554:	e12fff1e 	bx	lr
    1558:	ff200050 	.word	0xff200050
    155c:	ff20005c 	.word	0xff20005c
    1560:	ff200058 	.word	0xff200058

00001564 <read_slider_switches_ASM>:
    1564:	e59f1004 	ldr	r1, [pc, #4]	; 1570 <read_slider_switches_ASM+0xc>
    1568:	e5910000 	ldr	r0, [r1]
    156c:	e12fff1e 	bx	lr
    1570:	ff200040 	.word	0xff200040

00001574 <VGA_clear_charbuff_ASM>:
    1574:	e92d0030 	push	{r4, r5}
    1578:	e3a02000 	mov	r2, #0
    157c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1580:	e3a00000 	mov	r0, #0

00001584 <CHAR_LOOPX>:
    1584:	e3a01000 	mov	r1, #0
    1588:	e0834000 	add	r4, r3, r0

0000158c <CHAR_LOOPY>:
    158c:	e0845381 	add	r5, r4, r1, lsl #7
    1590:	e5c52000 	strb	r2, [r5]
    1594:	e2811001 	add	r1, r1, #1
    1598:	e351003c 	cmp	r1, #60	; 0x3c
    159c:	bafffffa 	blt	158c <CHAR_LOOPY>
    15a0:	e2800001 	add	r0, r0, #1
    15a4:	e3500050 	cmp	r0, #80	; 0x50
    15a8:	bafffff5 	blt	1584 <CHAR_LOOPX>
    15ac:	e8bd0030 	pop	{r4, r5}
    15b0:	e12fff1e 	bx	lr

000015b4 <VGA_clear_pixelbuff_ASM>:
    15b4:	e92d0030 	push	{r4, r5}
    15b8:	e3a02000 	mov	r2, #0
    15bc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    15c0:	e3a00000 	mov	r0, #0

000015c4 <PIXEL_LOOPX>:
    15c4:	e3a01000 	mov	r1, #0
    15c8:	e0834080 	add	r4, r3, r0, lsl #1

000015cc <PIXEL_LOOPY>:
    15cc:	e0845501 	add	r5, r4, r1, lsl #10
    15d0:	e1c520b0 	strh	r2, [r5]
    15d4:	e2811001 	add	r1, r1, #1
    15d8:	e35100f0 	cmp	r1, #240	; 0xf0
    15dc:	bafffffa 	blt	15cc <PIXEL_LOOPY>
    15e0:	e2800001 	add	r0, r0, #1
    15e4:	e3500d05 	cmp	r0, #320	; 0x140
    15e8:	bafffff5 	blt	15c4 <PIXEL_LOOPX>
    15ec:	e8bd0030 	pop	{r4, r5}
    15f0:	e12fff1e 	bx	lr

000015f4 <VGA_write_char_ASM>:
    15f4:	e3500000 	cmp	r0, #0
    15f8:	b12fff1e 	bxlt	lr
    15fc:	e3510000 	cmp	r1, #0
    1600:	b12fff1e 	bxlt	lr
    1604:	e350004f 	cmp	r0, #79	; 0x4f
    1608:	c12fff1e 	bxgt	lr
    160c:	e351003b 	cmp	r1, #59	; 0x3b
    1610:	c12fff1e 	bxgt	lr
    1614:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1618:	e0833000 	add	r3, r3, r0
    161c:	e0833381 	add	r3, r3, r1, lsl #7
    1620:	e5c32000 	strb	r2, [r3]
    1624:	e12fff1e 	bx	lr

00001628 <VGA_write_byte_ASM>:
    1628:	e3500000 	cmp	r0, #0
    162c:	b12fff1e 	bxlt	lr
    1630:	e3510000 	cmp	r1, #0
    1634:	b12fff1e 	bxlt	lr
    1638:	e350004e 	cmp	r0, #78	; 0x4e
    163c:	c12fff1e 	bxgt	lr
    1640:	e351003b 	cmp	r1, #59	; 0x3b
    1644:	c12fff1e 	bxgt	lr
    1648:	e92d0030 	push	{r4, r5}
    164c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1650:	e20250f0 	and	r5, r2, #240	; 0xf0
    1654:	e1a05225 	lsr	r5, r5, #4
    1658:	e202400f 	and	r4, r2, #15
    165c:	e59f2068 	ldr	r2, [pc, #104]	; 16cc <HEX_ASCII+0x10>
    1660:	e7d25005 	ldrb	r5, [r2, r5]
    1664:	e7d24004 	ldrb	r4, [r2, r4]
    1668:	e0833000 	add	r3, r3, r0
    166c:	e0833381 	add	r3, r3, r1, lsl #7
    1670:	e5c35000 	strb	r5, [r3]
    1674:	e2833001 	add	r3, r3, #1
    1678:	e5c34000 	strb	r4, [r3]
    167c:	e8bd0030 	pop	{r4, r5}
    1680:	e12fff1e 	bx	lr

00001684 <VGA_draw_point_ASM>:
    1684:	e59f3044 	ldr	r3, [pc, #68]	; 16d0 <HEX_ASCII+0x14>
    1688:	e3500000 	cmp	r0, #0
    168c:	b12fff1e 	bxlt	lr
    1690:	e3510000 	cmp	r1, #0
    1694:	b12fff1e 	bxlt	lr
    1698:	e1500003 	cmp	r0, r3
    169c:	c12fff1e 	bxgt	lr
    16a0:	e35100ef 	cmp	r1, #239	; 0xef
    16a4:	c12fff1e 	bxgt	lr
    16a8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    16ac:	e0833080 	add	r3, r3, r0, lsl #1
    16b0:	e0833501 	add	r3, r3, r1, lsl #10
    16b4:	e1c320b0 	strh	r2, [r3]
    16b8:	e12fff1e 	bx	lr

000016bc <HEX_ASCII>:
    16bc:	33323130 	.word	0x33323130
    16c0:	37363534 	.word	0x37363534
    16c4:	42413938 	.word	0x42413938
    16c8:	46454443 	.word	0x46454443
    16cc:	000016bc 	.word	0x000016bc
    16d0:	0000013f 	.word	0x0000013f

000016d4 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
    16d4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    16d8:	e28db000 	add	r11, sp, #0
    16dc:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
    16e0:	e3a030d3 	mov	r3, #211	; 0xd3
    16e4:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    16e8:	e51b3008 	ldr	r3, [r11, #-8]
    16ec:	e129f003 	msr	CPSR_fc, r3
}
    16f0:	e28bd000 	add	sp, r11, #0
    16f4:	e8bd0800 	ldmfd	sp!, {r11}
    16f8:	e12fff1e 	bx	lr

000016fc <enable_A9_interrupts>:

void enable_A9_interrupts() {
    16fc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1700:	e28db000 	add	r11, sp, #0
    1704:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
    1708:	e3a03053 	mov	r3, #83	; 0x53
    170c:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
    1710:	e51b3008 	ldr	r3, [r11, #-8]
    1714:	e129f003 	msr	CPSR_fc, r3
}
    1718:	e28bd000 	add	sp, r11, #0
    171c:	e8bd0800 	ldmfd	sp!, {r11}
    1720:	e12fff1e 	bx	lr

00001724 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
    1724:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1728:	e28db000 	add	r11, sp, #0
    172c:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
    1730:	e3e03007 	mvn	r3, #7
    1734:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
    1738:	e3a030d2 	mov	r3, #210	; 0xd2
    173c:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1740:	e51b300c 	ldr	r3, [r11, #-12]
    1744:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
    1748:	e51b3008 	ldr	r3, [r11, #-8]
    174c:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
    1750:	e3a030d3 	mov	r3, #211	; 0xd3
    1754:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
    1758:	e51b300c 	ldr	r3, [r11, #-12]
    175c:	e129f003 	msr	CPSR_fc, r3
}
    1760:	e28bd000 	add	sp, r11, #0
    1764:	e8bd0800 	ldmfd	sp!, {r11}
    1768:	e12fff1e 	bx	lr

0000176c <config_interrupt>:

void config_interrupt(int ID, int CPU) {
    176c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1770:	e28db000 	add	r11, sp, #0
    1774:	e24dd01c 	sub	sp, sp, #28
    1778:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
    177c:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
    1780:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1784:	e1a031c3 	asr	r3, r3, #3
    1788:	e3c33003 	bic	r3, r3, #3
    178c:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
    1790:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    1794:	e203301f 	and	r3, r3, #31
    1798:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
    179c:	e3a02001 	mov	r2, #1
    17a0:	e51b300c 	ldr	r3, [r11, #-12]
    17a4:	e1a03312 	lsl	r3, r2, r3
    17a8:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
    17ac:	e51b3008 	ldr	r3, [r11, #-8]
    17b0:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
    17b4:	e2433c03 	sub	r3, r3, #768	; 0x300
    17b8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
    17bc:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    17c0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    17c4:	e5921000 	ldr	r1, [r2]
    17c8:	e51b2010 	ldr	r2, [r11, #-16]
    17cc:	e1812002 	orr	r2, r1, r2
    17d0:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
    17d4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    17d8:	e3c33003 	bic	r3, r3, #3
    17dc:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
    17e0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
    17e4:	e2033003 	and	r3, r3, #3
    17e8:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
    17ec:	e51b2008 	ldr	r2, [r11, #-8]
    17f0:	e51b300c 	ldr	r3, [r11, #-12]
    17f4:	e0823003 	add	r3, r2, r3
    17f8:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
    17fc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
    1800:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
    1804:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
    1808:	e6ef2072 	uxtb	r2, r2
    180c:	e5c32000 	strb	r2, [r3]
}
    1810:	e28bd000 	add	sp, r11, #0
    1814:	e8bd0800 	ldmfd	sp!, {r11}
    1818:	e12fff1e 	bx	lr

0000181c <config_GIC>:

void config_GIC(int len, int* IDs) {
    181c:	e92d4800 	push	{r11, lr}
    1820:	e28db004 	add	r11, sp, #4
    1824:	e24dd010 	sub	sp, sp, #16
    1828:	e50b0010 	str	r0, [r11, #-16]
    182c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
    1830:	e3a03000 	mov	r3, #0
    1834:	e50b3008 	str	r3, [r11, #-8]
    1838:	ea00000a 	b	1868 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
    183c:	e51b3008 	ldr	r3, [r11, #-8]
    1840:	e1a03103 	lsl	r3, r3, #2
    1844:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
    1848:	e0823003 	add	r3, r2, r3
    184c:	e5933000 	ldr	r3, [r3]
    1850:	e1a00003 	mov	r0, r3
    1854:	e3a01001 	mov	r1, #1
    1858:	ebffffc3 	bl	176c <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
    185c:	e51b3008 	ldr	r3, [r11, #-8]
    1860:	e2833001 	add	r3, r3, #1
    1864:	e50b3008 	str	r3, [r11, #-8]
    1868:	e51b2008 	ldr	r2, [r11, #-8]
    186c:	e51b3010 	ldr	r3, [r11, #-16]
    1870:	e1520003 	cmp	r2, r3
    1874:	bafffff0 	blt	183c <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
    1878:	e30c3104 	movw	r3, #49412	; 0xc104
    187c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1880:	e30f2fff 	movw	r2, #65535	; 0xffff
    1884:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
    1888:	e3a03cc1 	mov	r3, #49408	; 0xc100
    188c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1890:	e3a02001 	mov	r2, #1
    1894:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
    1898:	e3a03a0d 	mov	r3, #53248	; 0xd000
    189c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    18a0:	e3a02001 	mov	r2, #1
    18a4:	e5832000 	str	r2, [r3]
}
    18a8:	e24bd004 	sub	sp, r11, #4
    18ac:	e8bd8800 	pop	{r11, pc}

000018b0 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
    18b0:	e24ee004 	sub	lr, lr, #4
    18b4:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
    18b8:	e28db018 	add	r11, sp, #24
    18bc:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
    18c0:	e30c310c 	movw	r3, #49420	; 0xc10c
    18c4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    18c8:	e5933000 	ldr	r3, [r3]
    18cc:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
    18d0:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
    18d4:	e3530053 	cmp	r3, #83	; 0x53
    18d8:	0a00003d 	beq	19d4 <__cs3_isr_irq+0x124>
    18dc:	e3530053 	cmp	r3, #83	; 0x53
    18e0:	ca000011 	bgt	192c <__cs3_isr_irq+0x7c>
    18e4:	e353004e 	cmp	r3, #78	; 0x4e
    18e8:	0a000031 	beq	19b4 <__cs3_isr_irq+0x104>
    18ec:	e353004e 	cmp	r3, #78	; 0x4e
    18f0:	ca000006 	bgt	1910 <__cs3_isr_irq+0x60>
    18f4:	e3530048 	cmp	r3, #72	; 0x48
    18f8:	0a000029 	beq	19a4 <__cs3_isr_irq+0xf4>
    18fc:	e3530049 	cmp	r3, #73	; 0x49
    1900:	0a000029 	beq	19ac <__cs3_isr_irq+0xfc>
    1904:	e353001d 	cmp	r3, #29
    1908:	0a000019 	beq	1974 <__cs3_isr_irq+0xc4>
    190c:	ea000036 	b	19ec <__cs3_isr_irq+0x13c>
    1910:	e3530050 	cmp	r3, #80	; 0x50
    1914:	0a00002a 	beq	19c4 <__cs3_isr_irq+0x114>
    1918:	e3530050 	cmp	r3, #80	; 0x50
    191c:	ba000026 	blt	19bc <__cs3_isr_irq+0x10c>
    1920:	e3530051 	cmp	r3, #81	; 0x51
    1924:	0a000028 	beq	19cc <__cs3_isr_irq+0x11c>
    1928:	ea00002f 	b	19ec <__cs3_isr_irq+0x13c>
    192c:	e35300c7 	cmp	r3, #199	; 0xc7
    1930:	0a000013 	beq	1984 <__cs3_isr_irq+0xd4>
    1934:	e35300c7 	cmp	r3, #199	; 0xc7
    1938:	ca000006 	bgt	1958 <__cs3_isr_irq+0xa8>
    193c:	e3530059 	cmp	r3, #89	; 0x59
    1940:	0a000027 	beq	19e4 <__cs3_isr_irq+0x134>
    1944:	e35300c5 	cmp	r3, #197	; 0xc5
    1948:	0a00000b 	beq	197c <__cs3_isr_irq+0xcc>
    194c:	e3530054 	cmp	r3, #84	; 0x54
    1950:	0a000021 	beq	19dc <__cs3_isr_irq+0x12c>
    1954:	ea000024 	b	19ec <__cs3_isr_irq+0x13c>
    1958:	e35300c9 	cmp	r3, #201	; 0xc9
    195c:	0a00000c 	beq	1994 <__cs3_isr_irq+0xe4>
    1960:	e35300c9 	cmp	r3, #201	; 0xc9
    1964:	ba000008 	blt	198c <__cs3_isr_irq+0xdc>
    1968:	e35300ca 	cmp	r3, #202	; 0xca
    196c:	0a00000a 	beq	199c <__cs3_isr_irq+0xec>
    1970:	ea00001d 	b	19ec <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
    1974:	ebfffdc7 	bl	1098 <A9_PRIV_TIM_ISR>
    1978:	ea00001c 	b	19f0 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
    197c:	ebfffdc6 	bl	109c <HPS_GPIO1_ISR>
    1980:	ea00001a 	b	19f0 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
    1984:	ebfffdc5 	bl	10a0 <HPS_TIM0_ISR>
    1988:	ea000018 	b	19f0 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
    198c:	ebfffdc4 	bl	10a4 <HPS_TIM1_ISR>
    1990:	ea000016 	b	19f0 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
    1994:	ebfffdc3 	bl	10a8 <HPS_TIM2_ISR>
    1998:	ea000014 	b	19f0 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
    199c:	ebfffdc2 	bl	10ac <HPS_TIM3_ISR>
    19a0:	ea000012 	b	19f0 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
    19a4:	ebfffdc1 	bl	10b0 <FPGA_INTERVAL_TIM_ISR>
    19a8:	ea000010 	b	19f0 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
    19ac:	ebfffdc0 	bl	10b4 <FPGA_PB_KEYS_ISR>
    19b0:	ea00000e 	b	19f0 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
    19b4:	ebfffdbf 	bl	10b8 <FPGA_Audio_ISR>
    19b8:	ea00000c 	b	19f0 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
    19bc:	ebfffdbe 	bl	10bc <FPGA_PS2_ISR>
    19c0:	ea00000a 	b	19f0 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
    19c4:	ebfffdbd 	bl	10c0 <FPGA_JTAG_ISR>
    19c8:	ea000008 	b	19f0 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
    19cc:	ebfffdbc 	bl	10c4 <FPGA_IrDA_ISR>
    19d0:	ea000006 	b	19f0 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
    19d4:	ebfffdbb 	bl	10c8 <FPGA_JP1_ISR>
    19d8:	ea000004 	b	19f0 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
    19dc:	ebfffdba 	bl	10cc <FPGA_JP2_ISR>
    19e0:	ea000002 	b	19f0 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
    19e4:	ebfffdb9 	bl	10d0 <FPGA_PS2_DUAL_ISR>
    19e8:	ea000000 	b	19f0 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
    19ec:	eafffffe 	b	19ec <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
    19f0:	e30c3110 	movw	r3, #49424	; 0xc110
    19f4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    19f8:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
    19fc:	e5832000 	str	r2, [r3]
}
    1a00:	e24bd018 	sub	sp, r11, #24
    1a04:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00001a08 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
    1a08:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a0c:	e28db000 	add	r11, sp, #0
	while(1);
    1a10:	eafffffe 	b	1a10 <__cs3_reset+0x8>

00001a14 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
    1a14:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a18:	e28db000 	add	r11, sp, #0
	while(1);
    1a1c:	eafffffe 	b	1a1c <__cs3_isr_undef+0x8>

00001a20 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    1a20:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a24:	e28db000 	add	r11, sp, #0
	while(1);
    1a28:	eafffffe 	b	1a28 <__cs3_isr_swi+0x8>

00001a2c <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1a2c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a30:	e28db000 	add	r11, sp, #0
	while(1);
    1a34:	eafffffe 	b	1a34 <__cs3_isr_pabort+0x8>

00001a38 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    1a38:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a3c:	e28db000 	add	r11, sp, #0
	while(1);
    1a40:	eafffffe 	b	1a40 <__cs3_isr_dabort+0x8>

00001a44 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1a44:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a48:	e28db000 	add	r11, sp, #0
	while(1);
    1a4c:	eafffffe 	b	1a4c <__cs3_isr_fiq+0x8>

00001a50 <fix_bug>:
}

void fix_bug() {
    1a50:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1a54:	e28db000 	add	r11, sp, #0
    1a58:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1a5c:	e30d3198 	movw	r3, #53656	; 0xd198
    1a60:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1a64:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    1a68:	e51b3008 	ldr	r3, [r11, #-8]
    1a6c:	e3a02703 	mov	r2, #786432	; 0xc0000
    1a70:	e5832000 	str	r2, [r3]
}
    1a74:	e28bd000 	add	sp, r11, #0
    1a78:	e8bd0800 	ldmfd	sp!, {r11}
    1a7c:	e12fff1e 	bx	lr

00001a80 <int_setup>:

void int_setup(int len, int* IDs) {
    1a80:	e92d4800 	push	{r11, lr}
    1a84:	e28db004 	add	r11, sp, #4
    1a88:	e24dd008 	sub	sp, sp, #8
    1a8c:	e50b0008 	str	r0, [r11, #-8]
    1a90:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1a94:	ebffff0e 	bl	16d4 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    1a98:	ebffff21 	bl	1724 <set_A9_IRQ_stack>
	fix_bug();
    1a9c:	ebffffeb 	bl	1a50 <fix_bug>
	config_GIC(len, IDs);
    1aa0:	e51b0008 	ldr	r0, [r11, #-8]
    1aa4:	e51b100c 	ldr	r1, [r11, #-12]
    1aa8:	ebffff5b 	bl	181c <config_GIC>
	enable_A9_interrupts();
    1aac:	ebffff12 	bl	16fc <enable_A9_interrupts>
}
    1ab0:	e24bd004 	sub	sp, r11, #4
    1ab4:	e8bd8800 	pop	{r11, pc}

00001ab8 <__aeabi_idiv>:
    1ab8:	e3510000 	cmp	r1, #0
    1abc:	0a000043 	beq	1bd0 <.divsi3_skip_div0_test+0x110>

00001ac0 <.divsi3_skip_div0_test>:
    1ac0:	e020c001 	eor	r12, r0, r1
    1ac4:	42611000 	rsbmi	r1, r1, #0
    1ac8:	e2512001 	subs	r2, r1, #1
    1acc:	0a000027 	beq	1b70 <.divsi3_skip_div0_test+0xb0>
    1ad0:	e1b03000 	movs	r3, r0
    1ad4:	42603000 	rsbmi	r3, r0, #0
    1ad8:	e1530001 	cmp	r3, r1
    1adc:	9a000026 	bls	1b7c <.divsi3_skip_div0_test+0xbc>
    1ae0:	e1110002 	tst	r1, r2
    1ae4:	0a000028 	beq	1b8c <.divsi3_skip_div0_test+0xcc>
    1ae8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1aec:	01a01181 	lsleq	r1, r1, #3
    1af0:	03a02008 	moveq	r2, #8
    1af4:	13a02001 	movne	r2, #1
    1af8:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1afc:	31510003 	cmpcc	r1, r3
    1b00:	31a01201 	lslcc	r1, r1, #4
    1b04:	31a02202 	lslcc	r2, r2, #4
    1b08:	3afffffa 	bcc	1af8 <.divsi3_skip_div0_test+0x38>
    1b0c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1b10:	31510003 	cmpcc	r1, r3
    1b14:	31a01081 	lslcc	r1, r1, #1
    1b18:	31a02082 	lslcc	r2, r2, #1
    1b1c:	3afffffa 	bcc	1b0c <.divsi3_skip_div0_test+0x4c>
    1b20:	e3a00000 	mov	r0, #0
    1b24:	e1530001 	cmp	r3, r1
    1b28:	20433001 	subcs	r3, r3, r1
    1b2c:	21800002 	orrcs	r0, r0, r2
    1b30:	e15300a1 	cmp	r3, r1, lsr #1
    1b34:	204330a1 	subcs	r3, r3, r1, lsr #1
    1b38:	218000a2 	orrcs	r0, r0, r2, lsr #1
    1b3c:	e1530121 	cmp	r3, r1, lsr #2
    1b40:	20433121 	subcs	r3, r3, r1, lsr #2
    1b44:	21800122 	orrcs	r0, r0, r2, lsr #2
    1b48:	e15301a1 	cmp	r3, r1, lsr #3
    1b4c:	204331a1 	subcs	r3, r3, r1, lsr #3
    1b50:	218001a2 	orrcs	r0, r0, r2, lsr #3
    1b54:	e3530000 	cmp	r3, #0
    1b58:	11b02222 	lsrsne	r2, r2, #4
    1b5c:	11a01221 	lsrne	r1, r1, #4
    1b60:	1affffef 	bne	1b24 <.divsi3_skip_div0_test+0x64>
    1b64:	e35c0000 	cmp	r12, #0
    1b68:	42600000 	rsbmi	r0, r0, #0
    1b6c:	e12fff1e 	bx	lr
    1b70:	e13c0000 	teq	r12, r0
    1b74:	42600000 	rsbmi	r0, r0, #0
    1b78:	e12fff1e 	bx	lr
    1b7c:	33a00000 	movcc	r0, #0
    1b80:	01a00fcc 	asreq	r0, r12, #31
    1b84:	03800001 	orreq	r0, r0, #1
    1b88:	e12fff1e 	bx	lr
    1b8c:	e3510801 	cmp	r1, #65536	; 0x10000
    1b90:	21a01821 	lsrcs	r1, r1, #16
    1b94:	23a02010 	movcs	r2, #16
    1b98:	33a02000 	movcc	r2, #0
    1b9c:	e3510c01 	cmp	r1, #256	; 0x100
    1ba0:	21a01421 	lsrcs	r1, r1, #8
    1ba4:	22822008 	addcs	r2, r2, #8
    1ba8:	e3510010 	cmp	r1, #16
    1bac:	21a01221 	lsrcs	r1, r1, #4
    1bb0:	22822004 	addcs	r2, r2, #4
    1bb4:	e3510004 	cmp	r1, #4
    1bb8:	82822003 	addhi	r2, r2, #3
    1bbc:	908220a1 	addls	r2, r2, r1, lsr #1
    1bc0:	e35c0000 	cmp	r12, #0
    1bc4:	e1a00233 	lsr	r0, r3, r2
    1bc8:	42600000 	rsbmi	r0, r0, #0
    1bcc:	e12fff1e 	bx	lr
    1bd0:	e3500000 	cmp	r0, #0
    1bd4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    1bd8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    1bdc:	ea000007 	b	1c00 <__aeabi_idiv0>

00001be0 <__aeabi_idivmod>:
    1be0:	e3510000 	cmp	r1, #0
    1be4:	0afffff9 	beq	1bd0 <.divsi3_skip_div0_test+0x110>
    1be8:	e92d4003 	push	{r0, r1, lr}
    1bec:	ebffffb3 	bl	1ac0 <.divsi3_skip_div0_test>
    1bf0:	e8bd4006 	pop	{r1, r2, lr}
    1bf4:	e0030092 	mul	r3, r2, r0
    1bf8:	e0411003 	sub	r1, r1, r3
    1bfc:	e12fff1e 	bx	lr

00001c00 <__aeabi_idiv0>:
    1c00:	e12fff1e 	bx	lr

00001c04 <__aeabi_drsub>:
    1c04:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1c08:	ea000000 	b	1c10 <__adddf3>

00001c0c <__aeabi_dsub>:
    1c0c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001c10 <__adddf3>:
    1c10:	e92d4030 	push	{r4, r5, lr}
    1c14:	e1a04081 	lsl	r4, r1, #1
    1c18:	e1a05083 	lsl	r5, r3, #1
    1c1c:	e1340005 	teq	r4, r5
    1c20:	01300002 	teqeq	r0, r2
    1c24:	1194c000 	orrsne	r12, r4, r0
    1c28:	1195c002 	orrsne	r12, r5, r2
    1c2c:	11f0cac4 	mvnsne	r12, r4, asr #21
    1c30:	11f0cac5 	mvnsne	r12, r5, asr #21
    1c34:	0a00008c 	beq	1e6c <__adddf3+0x25c>
    1c38:	e1a04aa4 	lsr	r4, r4, #21
    1c3c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1c40:	b2655000 	rsblt	r5, r5, #0
    1c44:	da000006 	ble	1c64 <__adddf3+0x54>
    1c48:	e0844005 	add	r4, r4, r5
    1c4c:	e0202002 	eor	r2, r0, r2
    1c50:	e0213003 	eor	r3, r1, r3
    1c54:	e0220000 	eor	r0, r2, r0
    1c58:	e0231001 	eor	r1, r3, r1
    1c5c:	e0202002 	eor	r2, r0, r2
    1c60:	e0213003 	eor	r3, r1, r3
    1c64:	e3550036 	cmp	r5, #54	; 0x36
    1c68:	88bd4030 	pophi	{r4, r5, lr}
    1c6c:	812fff1e 	bxhi	lr
    1c70:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1c74:	e1a01601 	lsl	r1, r1, #12
    1c78:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1c7c:	e18c1621 	orr	r1, r12, r1, lsr #12
    1c80:	0a000001 	beq	1c8c <__adddf3+0x7c>
    1c84:	e2700000 	rsbs	r0, r0, #0
    1c88:	e2e11000 	rsc	r1, r1, #0
    1c8c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1c90:	e1a03603 	lsl	r3, r3, #12
    1c94:	e18c3623 	orr	r3, r12, r3, lsr #12
    1c98:	0a000001 	beq	1ca4 <__adddf3+0x94>
    1c9c:	e2722000 	rsbs	r2, r2, #0
    1ca0:	e2e33000 	rsc	r3, r3, #0
    1ca4:	e1340005 	teq	r4, r5
    1ca8:	0a000069 	beq	1e54 <__adddf3+0x244>
    1cac:	e2444001 	sub	r4, r4, #1
    1cb0:	e275e020 	rsbs	lr, r5, #32
    1cb4:	ba000005 	blt	1cd0 <__adddf3+0xc0>
    1cb8:	e1a0ce12 	lsl	r12, r2, lr
    1cbc:	e0900532 	adds	r0, r0, r2, lsr r5
    1cc0:	e2a11000 	adc	r1, r1, #0
    1cc4:	e0900e13 	adds	r0, r0, r3, lsl lr
    1cc8:	e0b11553 	adcs	r1, r1, r3, asr r5
    1ccc:	ea000006 	b	1cec <__adddf3+0xdc>
    1cd0:	e2455020 	sub	r5, r5, #32
    1cd4:	e28ee020 	add	lr, lr, #32
    1cd8:	e3520001 	cmp	r2, #1
    1cdc:	e1a0ce13 	lsl	r12, r3, lr
    1ce0:	238cc002 	orrcs	r12, r12, #2
    1ce4:	e0900553 	adds	r0, r0, r3, asr r5
    1ce8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1cec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1cf0:	5a000002 	bpl	1d00 <__adddf3+0xf0>
    1cf4:	e27cc000 	rsbs	r12, r12, #0
    1cf8:	e2f00000 	rscs	r0, r0, #0
    1cfc:	e2e11000 	rsc	r1, r1, #0
    1d00:	e3510601 	cmp	r1, #1048576	; 0x100000
    1d04:	3a00000f 	bcc	1d48 <__adddf3+0x138>
    1d08:	e3510602 	cmp	r1, #2097152	; 0x200000
    1d0c:	3a000006 	bcc	1d2c <__adddf3+0x11c>
    1d10:	e1b010a1 	lsrs	r1, r1, #1
    1d14:	e1b00060 	rrxs	r0, r0
    1d18:	e1a0c06c 	rrx	r12, r12
    1d1c:	e2844001 	add	r4, r4, #1
    1d20:	e1a02a84 	lsl	r2, r4, #21
    1d24:	e3720501 	cmn	r2, #4194304	; 0x400000
    1d28:	2a00006b 	bcs	1edc <__adddf3+0x2cc>
    1d2c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1d30:	01b0c0a0 	lsrseq	r12, r0, #1
    1d34:	e2b00000 	adcs	r0, r0, #0
    1d38:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d3c:	e1811005 	orr	r1, r1, r5
    1d40:	e8bd4030 	pop	{r4, r5, lr}
    1d44:	e12fff1e 	bx	lr
    1d48:	e1b0c08c 	lsls	r12, r12, #1
    1d4c:	e0b00000 	adcs	r0, r0, r0
    1d50:	e0a11001 	adc	r1, r1, r1
    1d54:	e3110601 	tst	r1, #1048576	; 0x100000
    1d58:	e2444001 	sub	r4, r4, #1
    1d5c:	1afffff2 	bne	1d2c <__adddf3+0x11c>
    1d60:	e3310000 	teq	r1, #0
    1d64:	13a03014 	movne	r3, #20
    1d68:	03a03034 	moveq	r3, #52	; 0x34
    1d6c:	01a01000 	moveq	r1, r0
    1d70:	03a00000 	moveq	r0, #0
    1d74:	e1a02001 	mov	r2, r1
    1d78:	e3520801 	cmp	r2, #65536	; 0x10000
    1d7c:	21a02822 	lsrcs	r2, r2, #16
    1d80:	22433010 	subcs	r3, r3, #16
    1d84:	e3520c01 	cmp	r2, #256	; 0x100
    1d88:	21a02422 	lsrcs	r2, r2, #8
    1d8c:	22433008 	subcs	r3, r3, #8
    1d90:	e3520010 	cmp	r2, #16
    1d94:	21a02222 	lsrcs	r2, r2, #4
    1d98:	22433004 	subcs	r3, r3, #4
    1d9c:	e3520004 	cmp	r2, #4
    1da0:	22433002 	subcs	r3, r3, #2
    1da4:	304330a2 	subcc	r3, r3, r2, lsr #1
    1da8:	e04331a2 	sub	r3, r3, r2, lsr #3
    1dac:	e2532020 	subs	r2, r3, #32
    1db0:	aa000007 	bge	1dd4 <__adddf3+0x1c4>
    1db4:	e292200c 	adds	r2, r2, #12
    1db8:	da000004 	ble	1dd0 <__adddf3+0x1c0>
    1dbc:	e282c014 	add	r12, r2, #20
    1dc0:	e262200c 	rsb	r2, r2, #12
    1dc4:	e1a00c11 	lsl	r0, r1, r12
    1dc8:	e1a01231 	lsr	r1, r1, r2
    1dcc:	ea000004 	b	1de4 <__adddf3+0x1d4>
    1dd0:	e2822014 	add	r2, r2, #20
    1dd4:	d262c020 	rsble	r12, r2, #32
    1dd8:	e1a01211 	lsl	r1, r1, r2
    1ddc:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1de0:	d1a00210 	lslle	r0, r0, r2
    1de4:	e0544003 	subs	r4, r4, r3
    1de8:	a0811a04 	addge	r1, r1, r4, lsl #20
    1dec:	a1811005 	orrge	r1, r1, r5
    1df0:	a8bd4030 	popge	{r4, r5, lr}
    1df4:	a12fff1e 	bxge	lr
    1df8:	e1e04004 	mvn	r4, r4
    1dfc:	e254401f 	subs	r4, r4, #31
    1e00:	aa00000f 	bge	1e44 <__adddf3+0x234>
    1e04:	e294400c 	adds	r4, r4, #12
    1e08:	ca000006 	bgt	1e28 <__adddf3+0x218>
    1e0c:	e2844014 	add	r4, r4, #20
    1e10:	e2642020 	rsb	r2, r4, #32
    1e14:	e1a00430 	lsr	r0, r0, r4
    1e18:	e1800211 	orr	r0, r0, r1, lsl r2
    1e1c:	e1851431 	orr	r1, r5, r1, lsr r4
    1e20:	e8bd4030 	pop	{r4, r5, lr}
    1e24:	e12fff1e 	bx	lr
    1e28:	e264400c 	rsb	r4, r4, #12
    1e2c:	e2642020 	rsb	r2, r4, #32
    1e30:	e1a00230 	lsr	r0, r0, r2
    1e34:	e1800411 	orr	r0, r0, r1, lsl r4
    1e38:	e1a01005 	mov	r1, r5
    1e3c:	e8bd4030 	pop	{r4, r5, lr}
    1e40:	e12fff1e 	bx	lr
    1e44:	e1a00431 	lsr	r0, r1, r4
    1e48:	e1a01005 	mov	r1, r5
    1e4c:	e8bd4030 	pop	{r4, r5, lr}
    1e50:	e12fff1e 	bx	lr
    1e54:	e3340000 	teq	r4, #0
    1e58:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1e5c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1e60:	02844001 	addeq	r4, r4, #1
    1e64:	12455001 	subne	r5, r5, #1
    1e68:	eaffff8f 	b	1cac <__adddf3+0x9c>
    1e6c:	e1f0cac4 	mvns	r12, r4, asr #21
    1e70:	11f0cac5 	mvnsne	r12, r5, asr #21
    1e74:	0a00001d 	beq	1ef0 <__adddf3+0x2e0>
    1e78:	e1340005 	teq	r4, r5
    1e7c:	01300002 	teqeq	r0, r2
    1e80:	0a000004 	beq	1e98 <__adddf3+0x288>
    1e84:	e194c000 	orrs	r12, r4, r0
    1e88:	01a01003 	moveq	r1, r3
    1e8c:	01a00002 	moveq	r0, r2
    1e90:	e8bd4030 	pop	{r4, r5, lr}
    1e94:	e12fff1e 	bx	lr
    1e98:	e1310003 	teq	r1, r3
    1e9c:	13a01000 	movne	r1, #0
    1ea0:	13a00000 	movne	r0, #0
    1ea4:	18bd4030 	popne	{r4, r5, lr}
    1ea8:	112fff1e 	bxne	lr
    1eac:	e1b0caa4 	lsrs	r12, r4, #21
    1eb0:	1a000004 	bne	1ec8 <__adddf3+0x2b8>
    1eb4:	e1b00080 	lsls	r0, r0, #1
    1eb8:	e0b11001 	adcs	r1, r1, r1
    1ebc:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1ec0:	e8bd4030 	pop	{r4, r5, lr}
    1ec4:	e12fff1e 	bx	lr
    1ec8:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1ecc:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1ed0:	38bd4030 	popcc	{r4, r5, lr}
    1ed4:	312fff1e 	bxcc	lr
    1ed8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1edc:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1ee0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1ee4:	e3a00000 	mov	r0, #0
    1ee8:	e8bd4030 	pop	{r4, r5, lr}
    1eec:	e12fff1e 	bx	lr
    1ef0:	e1f0cac4 	mvns	r12, r4, asr #21
    1ef4:	11a01003 	movne	r1, r3
    1ef8:	11a00002 	movne	r0, r2
    1efc:	01f0cac5 	mvnseq	r12, r5, asr #21
    1f00:	11a03001 	movne	r3, r1
    1f04:	11a02000 	movne	r2, r0
    1f08:	e1904601 	orrs	r4, r0, r1, lsl #12
    1f0c:	01925603 	orrseq	r5, r2, r3, lsl #12
    1f10:	01310003 	teqeq	r1, r3
    1f14:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1f18:	e8bd4030 	pop	{r4, r5, lr}
    1f1c:	e12fff1e 	bx	lr

00001f20 <__aeabi_ui2d>:
    1f20:	e3300000 	teq	r0, #0
    1f24:	03a01000 	moveq	r1, #0
    1f28:	012fff1e 	bxeq	lr
    1f2c:	e92d4030 	push	{r4, r5, lr}
    1f30:	e3a04b01 	mov	r4, #1024	; 0x400
    1f34:	e2844032 	add	r4, r4, #50	; 0x32
    1f38:	e3a05000 	mov	r5, #0
    1f3c:	e3a01000 	mov	r1, #0
    1f40:	eaffff86 	b	1d60 <__adddf3+0x150>

00001f44 <__aeabi_i2d>:
    1f44:	e3300000 	teq	r0, #0
    1f48:	03a01000 	moveq	r1, #0
    1f4c:	012fff1e 	bxeq	lr
    1f50:	e92d4030 	push	{r4, r5, lr}
    1f54:	e3a04b01 	mov	r4, #1024	; 0x400
    1f58:	e2844032 	add	r4, r4, #50	; 0x32
    1f5c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1f60:	42600000 	rsbmi	r0, r0, #0
    1f64:	e3a01000 	mov	r1, #0
    1f68:	eaffff7c 	b	1d60 <__adddf3+0x150>

00001f6c <__aeabi_f2d>:
    1f6c:	e1b02080 	lsls	r2, r0, #1
    1f70:	e1a011c2 	asr	r1, r2, #3
    1f74:	e1a01061 	rrx	r1, r1
    1f78:	e1a00e02 	lsl	r0, r2, #28
    1f7c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1f80:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1f84:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1f88:	112fff1e 	bxne	lr
    1f8c:	e3320000 	teq	r2, #0
    1f90:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1f94:	012fff1e 	bxeq	lr
    1f98:	e92d4030 	push	{r4, r5, lr}
    1f9c:	e3a04d0e 	mov	r4, #896	; 0x380
    1fa0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1fa4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1fa8:	eaffff6c 	b	1d60 <__adddf3+0x150>

00001fac <__aeabi_ul2d>:
    1fac:	e1902001 	orrs	r2, r0, r1
    1fb0:	012fff1e 	bxeq	lr
    1fb4:	e92d4030 	push	{r4, r5, lr}
    1fb8:	e3a05000 	mov	r5, #0
    1fbc:	ea000006 	b	1fdc <__aeabi_l2d+0x1c>

00001fc0 <__aeabi_l2d>:
    1fc0:	e1902001 	orrs	r2, r0, r1
    1fc4:	012fff1e 	bxeq	lr
    1fc8:	e92d4030 	push	{r4, r5, lr}
    1fcc:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1fd0:	5a000001 	bpl	1fdc <__aeabi_l2d+0x1c>
    1fd4:	e2700000 	rsbs	r0, r0, #0
    1fd8:	e2e11000 	rsc	r1, r1, #0
    1fdc:	e3a04b01 	mov	r4, #1024	; 0x400
    1fe0:	e2844032 	add	r4, r4, #50	; 0x32
    1fe4:	e1b0cb21 	lsrs	r12, r1, #22
    1fe8:	0affff44 	beq	1d00 <__adddf3+0xf0>
    1fec:	e3a02003 	mov	r2, #3
    1ff0:	e1b0c1ac 	lsrs	r12, r12, #3
    1ff4:	12822003 	addne	r2, r2, #3
    1ff8:	e1b0c1ac 	lsrs	r12, r12, #3
    1ffc:	12822003 	addne	r2, r2, #3
    2000:	e08221ac 	add	r2, r2, r12, lsr #3
    2004:	e2623020 	rsb	r3, r2, #32
    2008:	e1a0c310 	lsl	r12, r0, r3
    200c:	e1a00230 	lsr	r0, r0, r2
    2010:	e1800311 	orr	r0, r0, r1, lsl r3
    2014:	e1a01231 	lsr	r1, r1, r2
    2018:	e0844002 	add	r4, r4, r2
    201c:	eaffff37 	b	1d00 <__adddf3+0xf0>

00002020 <__aeabi_dmul>:
    2020:	e92d4070 	push	{r4, r5, r6, lr}
    2024:	e3a0c0ff 	mov	r12, #255	; 0xff
    2028:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    202c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2030:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2034:	1134000c 	teqne	r4, r12
    2038:	1135000c 	teqne	r5, r12
    203c:	0b000075 	bleq	2218 <__aeabi_dmul+0x1f8>
    2040:	e0844005 	add	r4, r4, r5
    2044:	e0216003 	eor	r6, r1, r3
    2048:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    204c:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    2050:	e1905601 	orrs	r5, r0, r1, lsl #12
    2054:	11925603 	orrsne	r5, r2, r3, lsl #12
    2058:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    205c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    2060:	0a00001d 	beq	20dc <__aeabi_dmul+0xbc>
    2064:	e08ec290 	umull	r12, lr, r0, r2
    2068:	e3a05000 	mov	r5, #0
    206c:	e0a5e291 	umlal	lr, r5, r1, r2
    2070:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2074:	e0a5e390 	umlal	lr, r5, r0, r3
    2078:	e3a06000 	mov	r6, #0
    207c:	e0a65391 	umlal	r5, r6, r1, r3
    2080:	e33c0000 	teq	r12, #0
    2084:	138ee001 	orrne	lr, lr, #1
    2088:	e24440ff 	sub	r4, r4, #255	; 0xff
    208c:	e3560c02 	cmp	r6, #512	; 0x200
    2090:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2094:	2a000002 	bcs	20a4 <__aeabi_dmul+0x84>
    2098:	e1b0e08e 	lsls	lr, lr, #1
    209c:	e0b55005 	adcs	r5, r5, r5
    20a0:	e0a66006 	adc	r6, r6, r6
    20a4:	e1821586 	orr	r1, r2, r6, lsl #11
    20a8:	e1811aa5 	orr	r1, r1, r5, lsr #21
    20ac:	e1a00585 	lsl	r0, r5, #11
    20b0:	e1800aae 	orr	r0, r0, lr, lsr #21
    20b4:	e1a0e58e 	lsl	lr, lr, #11
    20b8:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    20bc:	835c0c07 	cmphi	r12, #1792	; 0x700
    20c0:	8a000011 	bhi	210c <__aeabi_dmul+0xec>
    20c4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    20c8:	01b0e0a0 	lsrseq	lr, r0, #1
    20cc:	e2b00000 	adcs	r0, r0, #0
    20d0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    20d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    20d8:	e12fff1e 	bx	lr
    20dc:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    20e0:	e1861001 	orr	r1, r6, r1
    20e4:	e1800002 	orr	r0, r0, r2
    20e8:	e0211003 	eor	r1, r1, r3
    20ec:	e05440ac 	subs	r4, r4, r12, lsr #1
    20f0:	c074500c 	rsbsgt	r5, r4, r12
    20f4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    20f8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    20fc:	c12fff1e 	bxgt	lr
    2100:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2104:	e3a0e000 	mov	lr, #0
    2108:	e2544001 	subs	r4, r4, #1
    210c:	ca00005d 	bgt	2288 <__aeabi_dmul+0x268>
    2110:	e3740036 	cmn	r4, #54	; 0x36
    2114:	d3a00000 	movle	r0, #0
    2118:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    211c:	d8bd4070 	pople	{r4, r5, r6, lr}
    2120:	d12fff1e 	bxle	lr
    2124:	e2644000 	rsb	r4, r4, #0
    2128:	e2544020 	subs	r4, r4, #32
    212c:	aa00001a 	bge	219c <__aeabi_dmul+0x17c>
    2130:	e294400c 	adds	r4, r4, #12
    2134:	ca00000c 	bgt	216c <__aeabi_dmul+0x14c>
    2138:	e2844014 	add	r4, r4, #20
    213c:	e2645020 	rsb	r5, r4, #32
    2140:	e1a03510 	lsl	r3, r0, r5
    2144:	e1a00430 	lsr	r0, r0, r4
    2148:	e1800511 	orr	r0, r0, r1, lsl r5
    214c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2150:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2154:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2158:	e0a21431 	adc	r1, r2, r1, lsr r4
    215c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2160:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2164:	e8bd4070 	pop	{r4, r5, r6, lr}
    2168:	e12fff1e 	bx	lr
    216c:	e264400c 	rsb	r4, r4, #12
    2170:	e2645020 	rsb	r5, r4, #32
    2174:	e1a03410 	lsl	r3, r0, r4
    2178:	e1a00530 	lsr	r0, r0, r5
    217c:	e1800411 	orr	r0, r0, r1, lsl r4
    2180:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2184:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2188:	e2a11000 	adc	r1, r1, #0
    218c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2190:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2194:	e8bd4070 	pop	{r4, r5, r6, lr}
    2198:	e12fff1e 	bx	lr
    219c:	e2645020 	rsb	r5, r4, #32
    21a0:	e18ee510 	orr	lr, lr, r0, lsl r5
    21a4:	e1a03430 	lsr	r3, r0, r4
    21a8:	e1833511 	orr	r3, r3, r1, lsl r5
    21ac:	e1a00431 	lsr	r0, r1, r4
    21b0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    21b4:	e1c00431 	bic	r0, r0, r1, lsr r4
    21b8:	e0800fa3 	add	r0, r0, r3, lsr #31
    21bc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    21c0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    21c4:	e8bd4070 	pop	{r4, r5, r6, lr}
    21c8:	e12fff1e 	bx	lr
    21cc:	e3340000 	teq	r4, #0
    21d0:	1a000008 	bne	21f8 <__aeabi_dmul+0x1d8>
    21d4:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    21d8:	e1b00080 	lsls	r0, r0, #1
    21dc:	e0a11001 	adc	r1, r1, r1
    21e0:	e3110601 	tst	r1, #1048576	; 0x100000
    21e4:	02444001 	subeq	r4, r4, #1
    21e8:	0afffffa 	beq	21d8 <__aeabi_dmul+0x1b8>
    21ec:	e1811006 	orr	r1, r1, r6
    21f0:	e3350000 	teq	r5, #0
    21f4:	112fff1e 	bxne	lr
    21f8:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    21fc:	e1b02082 	lsls	r2, r2, #1
    2200:	e0a33003 	adc	r3, r3, r3
    2204:	e3130601 	tst	r3, #1048576	; 0x100000
    2208:	02455001 	subeq	r5, r5, #1
    220c:	0afffffa 	beq	21fc <__aeabi_dmul+0x1dc>
    2210:	e1833006 	orr	r3, r3, r6
    2214:	e12fff1e 	bx	lr
    2218:	e134000c 	teq	r4, r12
    221c:	e00c5a23 	and	r5, r12, r3, lsr #20
    2220:	1135000c 	teqne	r5, r12
    2224:	0a000007 	beq	2248 <__aeabi_dmul+0x228>
    2228:	e1906081 	orrs	r6, r0, r1, lsl #1
    222c:	11926083 	orrsne	r6, r2, r3, lsl #1
    2230:	1affffe5 	bne	21cc <__aeabi_dmul+0x1ac>
    2234:	e0211003 	eor	r1, r1, r3
    2238:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    223c:	e3a00000 	mov	r0, #0
    2240:	e8bd4070 	pop	{r4, r5, r6, lr}
    2244:	e12fff1e 	bx	lr
    2248:	e1906081 	orrs	r6, r0, r1, lsl #1
    224c:	01a00002 	moveq	r0, r2
    2250:	01a01003 	moveq	r1, r3
    2254:	11926083 	orrsne	r6, r2, r3, lsl #1
    2258:	0a000010 	beq	22a0 <__aeabi_dmul+0x280>
    225c:	e134000c 	teq	r4, r12
    2260:	1a000001 	bne	226c <__aeabi_dmul+0x24c>
    2264:	e1906601 	orrs	r6, r0, r1, lsl #12
    2268:	1a00000c 	bne	22a0 <__aeabi_dmul+0x280>
    226c:	e135000c 	teq	r5, r12
    2270:	1a000003 	bne	2284 <__aeabi_dmul+0x264>
    2274:	e1926603 	orrs	r6, r2, r3, lsl #12
    2278:	11a00002 	movne	r0, r2
    227c:	11a01003 	movne	r1, r3
    2280:	1a000006 	bne	22a0 <__aeabi_dmul+0x280>
    2284:	e0211003 	eor	r1, r1, r3
    2288:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    228c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2290:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2294:	e3a00000 	mov	r0, #0
    2298:	e8bd4070 	pop	{r4, r5, r6, lr}
    229c:	e12fff1e 	bx	lr
    22a0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    22a4:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    22a8:	e8bd4070 	pop	{r4, r5, r6, lr}
    22ac:	e12fff1e 	bx	lr

000022b0 <__aeabi_ddiv>:
    22b0:	e92d4070 	push	{r4, r5, r6, lr}
    22b4:	e3a0c0ff 	mov	r12, #255	; 0xff
    22b8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    22bc:	e01c4a21 	ands	r4, r12, r1, lsr #20
    22c0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    22c4:	1134000c 	teqne	r4, r12
    22c8:	1135000c 	teqne	r5, r12
    22cc:	0b00005e 	bleq	244c <__aeabi_ddiv+0x19c>
    22d0:	e0444005 	sub	r4, r4, r5
    22d4:	e021e003 	eor	lr, r1, r3
    22d8:	e1925603 	orrs	r5, r2, r3, lsl #12
    22dc:	e1a01601 	lsl	r1, r1, #12
    22e0:	0a00004c 	beq	2418 <__aeabi_ddiv+0x168>
    22e4:	e1a03603 	lsl	r3, r3, #12
    22e8:	e3a05201 	mov	r5, #268435456	; 0x10000000
    22ec:	e1853223 	orr	r3, r5, r3, lsr #4
    22f0:	e1833c22 	orr	r3, r3, r2, lsr #24
    22f4:	e1a02402 	lsl	r2, r2, #8
    22f8:	e1855221 	orr	r5, r5, r1, lsr #4
    22fc:	e1855c20 	orr	r5, r5, r0, lsr #24
    2300:	e1a06400 	lsl	r6, r0, #8
    2304:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    2308:	e1550003 	cmp	r5, r3
    230c:	01560002 	cmpeq	r6, r2
    2310:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    2314:	e2844c03 	add	r4, r4, #768	; 0x300
    2318:	2a000001 	bcs	2324 <__aeabi_ddiv+0x74>
    231c:	e1b030a3 	lsrs	r3, r3, #1
    2320:	e1a02062 	rrx	r2, r2
    2324:	e0566002 	subs	r6, r6, r2
    2328:	e0c55003 	sbc	r5, r5, r3
    232c:	e1b030a3 	lsrs	r3, r3, #1
    2330:	e1a02062 	rrx	r2, r2
    2334:	e3a00601 	mov	r0, #1048576	; 0x100000
    2338:	e3a0c702 	mov	r12, #524288	; 0x80000
    233c:	e056e002 	subs	lr, r6, r2
    2340:	e0d5e003 	sbcs	lr, r5, r3
    2344:	20466002 	subcs	r6, r6, r2
    2348:	21a0500e 	movcs	r5, lr
    234c:	2180000c 	orrcs	r0, r0, r12
    2350:	e1b030a3 	lsrs	r3, r3, #1
    2354:	e1a02062 	rrx	r2, r2
    2358:	e056e002 	subs	lr, r6, r2
    235c:	e0d5e003 	sbcs	lr, r5, r3
    2360:	20466002 	subcs	r6, r6, r2
    2364:	21a0500e 	movcs	r5, lr
    2368:	218000ac 	orrcs	r0, r0, r12, lsr #1
    236c:	e1b030a3 	lsrs	r3, r3, #1
    2370:	e1a02062 	rrx	r2, r2
    2374:	e056e002 	subs	lr, r6, r2
    2378:	e0d5e003 	sbcs	lr, r5, r3
    237c:	20466002 	subcs	r6, r6, r2
    2380:	21a0500e 	movcs	r5, lr
    2384:	2180012c 	orrcs	r0, r0, r12, lsr #2
    2388:	e1b030a3 	lsrs	r3, r3, #1
    238c:	e1a02062 	rrx	r2, r2
    2390:	e056e002 	subs	lr, r6, r2
    2394:	e0d5e003 	sbcs	lr, r5, r3
    2398:	20466002 	subcs	r6, r6, r2
    239c:	21a0500e 	movcs	r5, lr
    23a0:	218001ac 	orrcs	r0, r0, r12, lsr #3
    23a4:	e195e006 	orrs	lr, r5, r6
    23a8:	0a00000d 	beq	23e4 <__aeabi_ddiv+0x134>
    23ac:	e1a05205 	lsl	r5, r5, #4
    23b0:	e1855e26 	orr	r5, r5, r6, lsr #28
    23b4:	e1a06206 	lsl	r6, r6, #4
    23b8:	e1a03183 	lsl	r3, r3, #3
    23bc:	e1833ea2 	orr	r3, r3, r2, lsr #29
    23c0:	e1a02182 	lsl	r2, r2, #3
    23c4:	e1b0c22c 	lsrs	r12, r12, #4
    23c8:	1affffdb 	bne	233c <__aeabi_ddiv+0x8c>
    23cc:	e3110601 	tst	r1, #1048576	; 0x100000
    23d0:	1a000006 	bne	23f0 <__aeabi_ddiv+0x140>
    23d4:	e1811000 	orr	r1, r1, r0
    23d8:	e3a00000 	mov	r0, #0
    23dc:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    23e0:	eaffffd5 	b	233c <__aeabi_ddiv+0x8c>
    23e4:	e3110601 	tst	r1, #1048576	; 0x100000
    23e8:	01811000 	orreq	r1, r1, r0
    23ec:	03a00000 	moveq	r0, #0
    23f0:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    23f4:	835c0c07 	cmphi	r12, #1792	; 0x700
    23f8:	8affff43 	bhi	210c <__aeabi_dmul+0xec>
    23fc:	e055c003 	subs	r12, r5, r3
    2400:	0056c002 	subseq	r12, r6, r2
    2404:	01b0c0a0 	lsrseq	r12, r0, #1
    2408:	e2b00000 	adcs	r0, r0, #0
    240c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2410:	e8bd4070 	pop	{r4, r5, r6, lr}
    2414:	e12fff1e 	bx	lr
    2418:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    241c:	e18e1621 	orr	r1, lr, r1, lsr #12
    2420:	e09440ac 	adds	r4, r4, r12, lsr #1
    2424:	c074500c 	rsbsgt	r5, r4, r12
    2428:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    242c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2430:	c12fff1e 	bxgt	lr
    2434:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2438:	e3a0e000 	mov	lr, #0
    243c:	e2544001 	subs	r4, r4, #1
    2440:	eaffff31 	b	210c <__aeabi_dmul+0xec>
    2444:	e185e006 	orr	lr, r5, r6
    2448:	eaffff2f 	b	210c <__aeabi_dmul+0xec>
    244c:	e00c5a23 	and	r5, r12, r3, lsr #20
    2450:	e134000c 	teq	r4, r12
    2454:	0135000c 	teqeq	r5, r12
    2458:	0affff90 	beq	22a0 <__aeabi_dmul+0x280>
    245c:	e134000c 	teq	r4, r12
    2460:	1a000006 	bne	2480 <__aeabi_ddiv+0x1d0>
    2464:	e1904601 	orrs	r4, r0, r1, lsl #12
    2468:	1affff8c 	bne	22a0 <__aeabi_dmul+0x280>
    246c:	e135000c 	teq	r5, r12
    2470:	1affff83 	bne	2284 <__aeabi_dmul+0x264>
    2474:	e1a00002 	mov	r0, r2
    2478:	e1a01003 	mov	r1, r3
    247c:	eaffff87 	b	22a0 <__aeabi_dmul+0x280>
    2480:	e135000c 	teq	r5, r12
    2484:	1a000004 	bne	249c <__aeabi_ddiv+0x1ec>
    2488:	e1925603 	orrs	r5, r2, r3, lsl #12
    248c:	0affff68 	beq	2234 <__aeabi_dmul+0x214>
    2490:	e1a00002 	mov	r0, r2
    2494:	e1a01003 	mov	r1, r3
    2498:	eaffff80 	b	22a0 <__aeabi_dmul+0x280>
    249c:	e1906081 	orrs	r6, r0, r1, lsl #1
    24a0:	11926083 	orrsne	r6, r2, r3, lsl #1
    24a4:	1affff48 	bne	21cc <__aeabi_dmul+0x1ac>
    24a8:	e1904081 	orrs	r4, r0, r1, lsl #1
    24ac:	1affff74 	bne	2284 <__aeabi_dmul+0x264>
    24b0:	e1925083 	orrs	r5, r2, r3, lsl #1
    24b4:	1affff5e 	bne	2234 <__aeabi_dmul+0x214>
    24b8:	eaffff78 	b	22a0 <__aeabi_dmul+0x280>

000024bc <__gedf2>:
    24bc:	e3e0c000 	mvn	r12, #0
    24c0:	ea000002 	b	24d0 <__cmpdf2+0x4>

000024c4 <__ledf2>:
    24c4:	e3a0c001 	mov	r12, #1
    24c8:	ea000000 	b	24d0 <__cmpdf2+0x4>

000024cc <__cmpdf2>:
    24cc:	e3a0c001 	mov	r12, #1
    24d0:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    24d4:	e1a0c081 	lsl	r12, r1, #1
    24d8:	e1f0cacc 	mvns	r12, r12, asr #21
    24dc:	e1a0c083 	lsl	r12, r3, #1
    24e0:	11f0cacc 	mvnsne	r12, r12, asr #21
    24e4:	0a00000e 	beq	2524 <__cmpdf2+0x58>
    24e8:	e28dd004 	add	sp, sp, #4
    24ec:	e190c081 	orrs	r12, r0, r1, lsl #1
    24f0:	0192c083 	orrseq	r12, r2, r3, lsl #1
    24f4:	11310003 	teqne	r1, r3
    24f8:	01300002 	teqeq	r0, r2
    24fc:	03a00000 	moveq	r0, #0
    2500:	012fff1e 	bxeq	lr
    2504:	e3700000 	cmn	r0, #0
    2508:	e1310003 	teq	r1, r3
    250c:	51510003 	cmppl	r1, r3
    2510:	01500002 	cmpeq	r0, r2
    2514:	21a00fc3 	asrcs	r0, r3, #31
    2518:	31e00fc3 	mvncc	r0, r3, asr #31
    251c:	e3800001 	orr	r0, r0, #1
    2520:	e12fff1e 	bx	lr
    2524:	e1a0c081 	lsl	r12, r1, #1
    2528:	e1f0cacc 	mvns	r12, r12, asr #21
    252c:	1a000001 	bne	2538 <__cmpdf2+0x6c>
    2530:	e190c601 	orrs	r12, r0, r1, lsl #12
    2534:	1a000004 	bne	254c <__cmpdf2+0x80>
    2538:	e1a0c083 	lsl	r12, r3, #1
    253c:	e1f0cacc 	mvns	r12, r12, asr #21
    2540:	1affffe8 	bne	24e8 <__cmpdf2+0x1c>
    2544:	e192c603 	orrs	r12, r2, r3, lsl #12
    2548:	0affffe6 	beq	24e8 <__cmpdf2+0x1c>
    254c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2550:	e12fff1e 	bx	lr

00002554 <__aeabi_cdrcmple>:
    2554:	e1a0c000 	mov	r12, r0
    2558:	e1a00002 	mov	r0, r2
    255c:	e1a0200c 	mov	r2, r12
    2560:	e1a0c001 	mov	r12, r1
    2564:	e1a01003 	mov	r1, r3
    2568:	e1a0300c 	mov	r3, r12
    256c:	eaffffff 	b	2570 <__aeabi_cdcmpeq>

00002570 <__aeabi_cdcmpeq>:
    2570:	e92d4001 	push	{r0, lr}
    2574:	ebffffd4 	bl	24cc <__cmpdf2>
    2578:	e3500000 	cmp	r0, #0
    257c:	43700000 	cmnmi	r0, #0
    2580:	e8bd4001 	pop	{r0, lr}
    2584:	e12fff1e 	bx	lr

00002588 <__aeabi_dcmpeq>:
    2588:	e52de008 	str	lr, [sp, #-8]!
    258c:	ebfffff7 	bl	2570 <__aeabi_cdcmpeq>
    2590:	03a00001 	moveq	r0, #1
    2594:	13a00000 	movne	r0, #0
    2598:	e49de008 	ldr	lr, [sp], #8
    259c:	e12fff1e 	bx	lr

000025a0 <__aeabi_dcmplt>:
    25a0:	e52de008 	str	lr, [sp, #-8]!
    25a4:	ebfffff1 	bl	2570 <__aeabi_cdcmpeq>
    25a8:	33a00001 	movcc	r0, #1
    25ac:	23a00000 	movcs	r0, #0
    25b0:	e49de008 	ldr	lr, [sp], #8
    25b4:	e12fff1e 	bx	lr

000025b8 <__aeabi_dcmple>:
    25b8:	e52de008 	str	lr, [sp, #-8]!
    25bc:	ebffffeb 	bl	2570 <__aeabi_cdcmpeq>
    25c0:	93a00001 	movls	r0, #1
    25c4:	83a00000 	movhi	r0, #0
    25c8:	e49de008 	ldr	lr, [sp], #8
    25cc:	e12fff1e 	bx	lr

000025d0 <__aeabi_dcmpge>:
    25d0:	e52de008 	str	lr, [sp, #-8]!
    25d4:	ebffffde 	bl	2554 <__aeabi_cdrcmple>
    25d8:	93a00001 	movls	r0, #1
    25dc:	83a00000 	movhi	r0, #0
    25e0:	e49de008 	ldr	lr, [sp], #8
    25e4:	e12fff1e 	bx	lr

000025e8 <__aeabi_dcmpgt>:
    25e8:	e52de008 	str	lr, [sp, #-8]!
    25ec:	ebffffd8 	bl	2554 <__aeabi_cdrcmple>
    25f0:	33a00001 	movcc	r0, #1
    25f4:	23a00000 	movcs	r0, #0
    25f8:	e49de008 	ldr	lr, [sp], #8
    25fc:	e12fff1e 	bx	lr

00002600 <__aeabi_d2iz>:
    2600:	e1a02081 	lsl	r2, r1, #1
    2604:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2608:	2a00000c 	bcs	2640 <__aeabi_d2iz+0x40>
    260c:	5a000009 	bpl	2638 <__aeabi_d2iz+0x38>
    2610:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2614:	e0532ac2 	subs	r2, r3, r2, asr #21
    2618:	9a00000a 	bls	2648 <__aeabi_d2iz+0x48>
    261c:	e1a03581 	lsl	r3, r1, #11
    2620:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2624:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2628:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    262c:	e1a00233 	lsr	r0, r3, r2
    2630:	12600000 	rsbne	r0, r0, #0
    2634:	e12fff1e 	bx	lr
    2638:	e3a00000 	mov	r0, #0
    263c:	e12fff1e 	bx	lr
    2640:	e1900601 	orrs	r0, r0, r1, lsl #12
    2644:	1a000002 	bne	2654 <__aeabi_d2iz+0x54>
    2648:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    264c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2650:	e12fff1e 	bx	lr
    2654:	e3a00000 	mov	r0, #0
    2658:	e12fff1e 	bx	lr

0000265c <atexit>:
    265c:	e1a01000 	mov	r1, r0
    2660:	e3a00000 	mov	r0, #0
    2664:	e92d4008 	push	{r3, lr}
    2668:	e1a02000 	mov	r2, r0
    266c:	e1a03000 	mov	r3, r0
    2670:	eb00000e 	bl	26b0 <__register_exitproc>
    2674:	e8bd4008 	pop	{r3, lr}
    2678:	e12fff1e 	bx	lr

0000267c <exit>:
    267c:	e92d4008 	push	{r3, lr}
    2680:	e3a01000 	mov	r1, #0
    2684:	e1a04000 	mov	r4, r0
    2688:	eb000045 	bl	27a4 <__call_exitprocs>
    268c:	e59f3018 	ldr	r3, [pc, #24]	; 26ac <exit+0x30>
    2690:	e5930000 	ldr	r0, [r3]
    2694:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2698:	e3530000 	cmp	r3, #0
    269c:	11a0e00f 	movne	lr, pc
    26a0:	112fff13 	bxne	r3
    26a4:	e1a00004 	mov	r0, r4
    26a8:	eb0000c9 	bl	29d4 <_exit>
    26ac:	00002a7c 	.word	0x00002a7c

000026b0 <__register_exitproc>:
    26b0:	e59fc0e4 	ldr	r12, [pc, #228]	; 279c <__register_exitproc+0xec>
    26b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    26b8:	e59c4000 	ldr	r4, [r12]
    26bc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    26c0:	e35c0000 	cmp	r12, #0
    26c4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    26c8:	e59c5004 	ldr	r5, [r12, #4]
    26cc:	0584c148 	streq	r12, [r4, #328]	; 0x148
    26d0:	e355001f 	cmp	r5, #31
    26d4:	e24dd010 	sub	sp, sp, #16
    26d8:	e1a06000 	mov	r6, r0
    26dc:	da000015 	ble	2738 <__register_exitproc+0x88>
    26e0:	e59f00b8 	ldr	r0, [pc, #184]	; 27a0 <__register_exitproc+0xf0>
    26e4:	e3500000 	cmp	r0, #0
    26e8:	1a000001 	bne	26f4 <__register_exitproc+0x44>
    26ec:	e3e00000 	mvn	r0, #0
    26f0:	ea000018 	b	2758 <__register_exitproc+0xa8>
    26f4:	e3a00e19 	mov	r0, #400	; 0x190
    26f8:	e58d100c 	str	r1, [sp, #12]
    26fc:	e58d2008 	str	r2, [sp, #8]
    2700:	e58d3004 	str	r3, [sp, #4]
    2704:	e320f000 	nop	{0}
    2708:	e250c000 	subs	r12, r0, #0
    270c:	e59d100c 	ldr	r1, [sp, #12]
    2710:	e59d2008 	ldr	r2, [sp, #8]
    2714:	e59d3004 	ldr	r3, [sp, #4]
    2718:	0afffff3 	beq	26ec <__register_exitproc+0x3c>
    271c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2720:	e3a00000 	mov	r0, #0
    2724:	e58c0004 	str	r0, [r12, #4]
    2728:	e58c5000 	str	r5, [r12]
    272c:	e584c148 	str	r12, [r4, #328]	; 0x148
    2730:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2734:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2738:	e3560000 	cmp	r6, #0
    273c:	e59c4004 	ldr	r4, [r12, #4]
    2740:	1a000007 	bne	2764 <__register_exitproc+0xb4>
    2744:	e2843002 	add	r3, r4, #2
    2748:	e2844001 	add	r4, r4, #1
    274c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2750:	e58c4004 	str	r4, [r12, #4]
    2754:	e3a00000 	mov	r0, #0
    2758:	e28dd010 	add	sp, sp, #16
    275c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2760:	e12fff1e 	bx	lr
    2764:	e3a00001 	mov	r0, #1
    2768:	e1a00410 	lsl	r0, r0, r4
    276c:	e08c8104 	add	r8, r12, r4, lsl #2
    2770:	e3560002 	cmp	r6, #2
    2774:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2778:	e5883108 	str	r3, [r8, #264]	; 0x108
    277c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2780:	e1877000 	orr	r7, r7, r0
    2784:	01830000 	orreq	r0, r3, r0
    2788:	e1a05008 	mov	r5, r8
    278c:	e5882088 	str	r2, [r8, #136]	; 0x88
    2790:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2794:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2798:	eaffffe9 	b	2744 <__register_exitproc+0x94>
    279c:	00002a7c 	.word	0x00002a7c
    27a0:	00000000 	.word	0x00000000

000027a4 <__call_exitprocs>:
    27a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    27a8:	e59f3168 	ldr	r3, [pc, #360]	; 2918 <__call_exitprocs+0x174>
    27ac:	e5933000 	ldr	r3, [r3]
    27b0:	e24dd014 	sub	sp, sp, #20
    27b4:	e58d3004 	str	r3, [sp, #4]
    27b8:	e2833f52 	add	r3, r3, #328	; 0x148
    27bc:	e58d0008 	str	r0, [sp, #8]
    27c0:	e58d300c 	str	r3, [sp, #12]
    27c4:	e1a07001 	mov	r7, r1
    27c8:	e3a08001 	mov	r8, #1
    27cc:	e59d3004 	ldr	r3, [sp, #4]
    27d0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    27d4:	e3560000 	cmp	r6, #0
    27d8:	e59db00c 	ldr	r11, [sp, #12]
    27dc:	0a000033 	beq	28b0 <__call_exitprocs+0x10c>
    27e0:	e5965004 	ldr	r5, [r6, #4]
    27e4:	e2554001 	subs	r4, r5, #1
    27e8:	5286a088 	addpl	r10, r6, #136	; 0x88
    27ec:	5285501f 	addpl	r5, r5, #31
    27f0:	508a5105 	addpl	r5, r10, r5, lsl #2
    27f4:	5a000007 	bpl	2818 <__call_exitprocs+0x74>
    27f8:	ea000029 	b	28a4 <__call_exitprocs+0x100>
    27fc:	e5953000 	ldr	r3, [r5]
    2800:	e1530007 	cmp	r3, r7
    2804:	0a000005 	beq	2820 <__call_exitprocs+0x7c>
    2808:	e2444001 	sub	r4, r4, #1
    280c:	e3740001 	cmn	r4, #1
    2810:	e2455004 	sub	r5, r5, #4
    2814:	0a000022 	beq	28a4 <__call_exitprocs+0x100>
    2818:	e3570000 	cmp	r7, #0
    281c:	1afffff6 	bne	27fc <__call_exitprocs+0x58>
    2820:	e5963004 	ldr	r3, [r6, #4]
    2824:	e06a2005 	rsb	r2, r10, r5
    2828:	e2433001 	sub	r3, r3, #1
    282c:	e0862002 	add	r2, r6, r2
    2830:	e1530004 	cmp	r3, r4
    2834:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2838:	13a01000 	movne	r1, #0
    283c:	05864004 	streq	r4, [r6, #4]
    2840:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2844:	e3530000 	cmp	r3, #0
    2848:	0affffee 	beq	2808 <__call_exitprocs+0x64>
    284c:	e1a02418 	lsl	r2, r8, r4
    2850:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2854:	e1120001 	tst	r2, r1
    2858:	e5969004 	ldr	r9, [r6, #4]
    285c:	0a000016 	beq	28bc <__call_exitprocs+0x118>
    2860:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2864:	e1120001 	tst	r2, r1
    2868:	1a000016 	bne	28c8 <__call_exitprocs+0x124>
    286c:	e59d0008 	ldr	r0, [sp, #8]
    2870:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2874:	e1a0e00f 	mov	lr, pc
    2878:	e12fff13 	bx	r3
    287c:	e5963004 	ldr	r3, [r6, #4]
    2880:	e1530009 	cmp	r3, r9
    2884:	1affffd0 	bne	27cc <__call_exitprocs+0x28>
    2888:	e59b3000 	ldr	r3, [r11]
    288c:	e1530006 	cmp	r3, r6
    2890:	1affffcd 	bne	27cc <__call_exitprocs+0x28>
    2894:	e2444001 	sub	r4, r4, #1
    2898:	e3740001 	cmn	r4, #1
    289c:	e2455004 	sub	r5, r5, #4
    28a0:	1affffdc 	bne	2818 <__call_exitprocs+0x74>
    28a4:	e59f1070 	ldr	r1, [pc, #112]	; 291c <__call_exitprocs+0x178>
    28a8:	e3510000 	cmp	r1, #0
    28ac:	1a000009 	bne	28d8 <__call_exitprocs+0x134>
    28b0:	e28dd014 	add	sp, sp, #20
    28b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    28b8:	e12fff1e 	bx	lr
    28bc:	e1a0e00f 	mov	lr, pc
    28c0:	e12fff13 	bx	r3
    28c4:	eaffffec 	b	287c <__call_exitprocs+0xd8>
    28c8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    28cc:	e1a0e00f 	mov	lr, pc
    28d0:	e12fff13 	bx	r3
    28d4:	eaffffe8 	b	287c <__call_exitprocs+0xd8>
    28d8:	e5963004 	ldr	r3, [r6, #4]
    28dc:	e3530000 	cmp	r3, #0
    28e0:	e5963000 	ldr	r3, [r6]
    28e4:	1a000008 	bne	290c <__call_exitprocs+0x168>
    28e8:	e3530000 	cmp	r3, #0
    28ec:	0a000006 	beq	290c <__call_exitprocs+0x168>
    28f0:	e1a00006 	mov	r0, r6
    28f4:	e58b3000 	str	r3, [r11]
    28f8:	e320f000 	nop	{0}
    28fc:	e59b6000 	ldr	r6, [r11]
    2900:	e3560000 	cmp	r6, #0
    2904:	1affffb5 	bne	27e0 <__call_exitprocs+0x3c>
    2908:	eaffffe8 	b	28b0 <__call_exitprocs+0x10c>
    290c:	e1a0b006 	mov	r11, r6
    2910:	e1a06003 	mov	r6, r3
    2914:	eafffff9 	b	2900 <__call_exitprocs+0x15c>
    2918:	00002a7c 	.word	0x00002a7c
    291c:	00000000 	.word	0x00000000

00002920 <register_fini>:
    2920:	e92d4008 	push	{r3, lr}
    2924:	e59f3010 	ldr	r3, [pc, #16]	; 293c <register_fini+0x1c>
    2928:	e3530000 	cmp	r3, #0
    292c:	159f000c 	ldrne	r0, [pc, #12]	; 2940 <register_fini+0x20>
    2930:	1bffff49 	blne	265c <atexit>
    2934:	e8bd4008 	pop	{r3, lr}
    2938:	e12fff1e 	bx	lr
    293c:	00002aa4 	.word	0x00002aa4
    2940:	00002944 	.word	0x00002944

00002944 <__libc_fini_array>:
    2944:	e92d4038 	push	{r3, r4, r5, lr}
    2948:	e59f5030 	ldr	r5, [pc, #48]	; 2980 <__libc_fini_array+0x3c>
    294c:	e59f4030 	ldr	r4, [pc, #48]	; 2984 <__libc_fini_array+0x40>
    2950:	e0654004 	rsb	r4, r5, r4
    2954:	e1b04144 	asrs	r4, r4, #2
    2958:	10855104 	addne	r5, r5, r4, lsl #2
    295c:	0a000004 	beq	2974 <__libc_fini_array+0x30>
    2960:	e5353004 	ldr	r3, [r5, #-4]!
    2964:	e1a0e00f 	mov	lr, pc
    2968:	e12fff13 	bx	r3
    296c:	e2544001 	subs	r4, r4, #1
    2970:	1afffffa 	bne	2960 <__libc_fini_array+0x1c>
    2974:	eb00004a 	bl	2aa4 <__libc_fini>
    2978:	e8bd4038 	pop	{r3, r4, r5, lr}
    297c:	e12fff1e 	bx	lr
    2980:	00002abc 	.word	0x00002abc
    2984:	00002ac0 	.word	0x00002ac0

00002988 <__cs3_premain>:
    2988:	e92d4008 	push	{r3, lr}
    298c:	eb000017 	bl	29f0 <__libc_init_array>
    2990:	e59f3030 	ldr	r3, [pc, #48]	; 29c8 <__cs3_premain+0x40>
    2994:	e3530000 	cmp	r3, #0
    2998:	15930000 	ldrne	r0, [r3]
    299c:	01a00003 	moveq	r0, r3
    29a0:	e59f3024 	ldr	r3, [pc, #36]	; 29cc <__cs3_premain+0x44>
    29a4:	e3530000 	cmp	r3, #0
    29a8:	15931000 	ldrne	r1, [r3]
    29ac:	01a01003 	moveq	r1, r3
    29b0:	e3a02000 	mov	r2, #0
    29b4:	ebfff8ff 	bl	db8 <main>
    29b8:	e59f3010 	ldr	r3, [pc, #16]	; 29d0 <__cs3_premain+0x48>
    29bc:	e3530000 	cmp	r3, #0
    29c0:	1bffff2d 	blne	267c <exit>
    29c4:	eafffffe 	b	29c4 <__cs3_premain+0x3c>
	...
    29d0:	0000267c 	.word	0x0000267c

000029d4 <_exit>:
    29d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    29d8:	e3a00018 	mov	r0, #24
    29dc:	e59f1004 	ldr	r1, [pc, #4]	; 29e8 <_exit+0x14>
    29e0:	ef123456 	svc	0x00123456
    29e4:	eafffffe 	b	29e4 <_exit+0x10>
    29e8:	00020026 	.word	0x00020026

000029ec <__cs3_isr_interrupt>:
    29ec:	eafffffe 	b	29ec <__cs3_isr_interrupt>

000029f0 <__libc_init_array>:
    29f0:	e92d4070 	push	{r4, r5, r6, lr}
    29f4:	e59f506c 	ldr	r5, [pc, #108]	; 2a68 <__libc_init_array+0x78>
    29f8:	e59f606c 	ldr	r6, [pc, #108]	; 2a6c <__libc_init_array+0x7c>
    29fc:	e0656006 	rsb	r6, r5, r6
    2a00:	e1b06146 	asrs	r6, r6, #2
    2a04:	12455004 	subne	r5, r5, #4
    2a08:	13a04000 	movne	r4, #0
    2a0c:	0a000005 	beq	2a28 <__libc_init_array+0x38>
    2a10:	e5b53004 	ldr	r3, [r5, #4]!
    2a14:	e2844001 	add	r4, r4, #1
    2a18:	e1a0e00f 	mov	lr, pc
    2a1c:	e12fff13 	bx	r3
    2a20:	e1560004 	cmp	r6, r4
    2a24:	1afffff9 	bne	2a10 <__libc_init_array+0x20>
    2a28:	e59f5040 	ldr	r5, [pc, #64]	; 2a70 <__libc_init_array+0x80>
    2a2c:	e59f6040 	ldr	r6, [pc, #64]	; 2a74 <__libc_init_array+0x84>
    2a30:	e0656006 	rsb	r6, r5, r6
    2a34:	eb000012 	bl	2a84 <_init>
    2a38:	e1b06146 	asrs	r6, r6, #2
    2a3c:	12455004 	subne	r5, r5, #4
    2a40:	13a04000 	movne	r4, #0
    2a44:	0a000005 	beq	2a60 <__libc_init_array+0x70>
    2a48:	e5b53004 	ldr	r3, [r5, #4]!
    2a4c:	e2844001 	add	r4, r4, #1
    2a50:	e1a0e00f 	mov	lr, pc
    2a54:	e12fff13 	bx	r3
    2a58:	e1560004 	cmp	r6, r4
    2a5c:	1afffff9 	bne	2a48 <__libc_init_array+0x58>
    2a60:	e8bd4070 	pop	{r4, r5, r6, lr}
    2a64:	e12fff1e 	bx	lr
    2a68:	00002a9c 	.word	0x00002a9c
    2a6c:	00002a9c 	.word	0x00002a9c
    2a70:	00002a9c 	.word	0x00002a9c
    2a74:	00002aa4 	.word	0x00002aa4

Disassembly of section .rodata:

00002a7c <_global_impure_ptr>:
    2a7c:	00031970 00000043                       p...C...

00002a84 <_init>:
    2a84:	e1a0c00d 	mov	r12, sp
    2a88:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2a8c:	e24cb004 	sub	r11, r12, #4
    2a90:	e24bd028 	sub	sp, r11, #40	; 0x28
    2a94:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2a98:	e12fff1e 	bx	lr

00002a9c <__init_array_start>:
    2a9c:	00002920 	.word	0x00002920

00002aa0 <__frame_dummy_init_array_entry>:
    2aa0:	00000208                                ....

00002aa4 <__libc_fini>:
    2aa4:	e1a0c00d 	mov	r12, sp
    2aa8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2aac:	e24cb004 	sub	r11, r12, #4
    2ab0:	e24bd028 	sub	sp, r11, #40	; 0x28
    2ab4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2ab8:	e12fff1e 	bx	lr

00002abc <__fini_array_start>:
    2abc:	000001c4 	.word	0x000001c4

00002ac0 <__cs3_regions>:
	...
    2acc:	00031da0 	.word	0x00031da0
    2ad0:	00000020 	.word	0x00000020

00002ad4 <__cs3_regions_end>:
    2ad4:	00000000 	.word	0x00000000
